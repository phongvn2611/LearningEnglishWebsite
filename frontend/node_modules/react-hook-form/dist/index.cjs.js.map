{"version":3,"file":"index.cjs.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/isNameInFieldArray.ts","../src/logic/getNodeParentName.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/useController.ts","../src/logic/getControllerValue.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/utils/isFunction.ts","../src/utils/cloneObject.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isString.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/unset.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/schemaErrorLookup.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/utils/omitKeys.ts","../src/useForm.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T>(name?: T, signalName?: string) =>\n  !name ||\n  !signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, TearDown } from './utils/createSubject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport { FieldValues, UseFormStateProps, UseFormStateReturn } from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(_name.current, formState.name) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n    skipEarlySubscription: true,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPathWithValue,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TResult = any,\n  TName extends FieldPathWithValue<TFieldValues, TResult> = FieldPathWithValue<\n    TFieldValues,\n    TResult\n  >,\n>(\n  props: UseControllerProps<TFieldValues, TResult, TName>,\n): UseControllerReturn<TFieldValues, TResult, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, _name.current)),\n    skipEarlySubscription: true,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type Subscription = {\n  add: (tearDown: TearDown) => void;\n  unsubscribe: () => void;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nfunction createSubscription() {\n  let tearDowns: TearDown[] = [];\n\n  const add = (tearDown: TearDown) => {\n    tearDowns.push(tearDown);\n  };\n\n  const unsubscribe = () => {\n    for (const teardown of tearDowns) {\n      teardown();\n    }\n    tearDowns = [];\n  };\n\n  return {\n    add,\n    unsubscribe,\n  };\n}\n\nfunction createSubscriber<T>(\n  observer: Observer<T>,\n  subscription: Subscription,\n): Observer<T> {\n  let closed = false;\n  subscription.add(() => (closed = true));\n\n  const next = (value: T) => {\n    if (!closed) {\n      observer.next(value);\n    }\n  };\n\n  return {\n    next,\n  };\n}\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>) => {\n    const subscription = createSubscription();\n    const subscriber = createSubscriber(observer, subscription);\n    _observers.push(subscriber);\n    return subscription;\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    control: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { ControllerProps, FieldPathWithValue, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TResult = any,\n  TName extends FieldPathWithValue<TFieldValues, TResult> = FieldPathWithValue<\n    TFieldValues,\n    TResult\n  >,\n>(\n  props: ControllerProps<TFieldValues, TResult, TName>,\n) => props.render(useController<TFieldValues, TResult, TName>(props));\n\nexport { Controller };\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n    skipEarlySubscription: true,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      set(control._formValues, name, updatedFieldArrayValues);\n      setFields(updatedFieldArrayValuesWithKey);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    control._executeSchema([name]).then((result) => {\n      const error = get(result.errors, name);\n\n      if (error && error.type && !get(control._formState.errors, name)) {\n        set(control._formState.errors, name, error);\n        control._subjects.state.next({\n          errors: control._formState.errors as FieldErrors<TFieldValues>,\n        });\n      }\n    });\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  React.useEffect(\n    () => () =>\n      Object.values(control._subjects).forEach((subject) =>\n        subject.unsubscribe(),\n      ),\n    [control],\n  );\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import * as React from 'react';\n\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (shouldSubscribeByName(_name.current, formState.name)) {\n        control._stateFlags.mount = true;\n        const fieldValues = control._getWatch(\n          _name.current as InternalFieldName,\n          defaultValue as UnpackNestedValue<\n            DeepPartialSkipArrayKey<TFieldValues>\n          >,\n        );\n\n        updateValue(\n          isObject(fieldValues)\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","React","createContext","useFormContext","useContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","signalName","convertToArrayPayload","currentName","startsWith","tearDown","_unsubscribe","unsubscribe","useSubscribe","props","useRef","_updateSubscription","disabled","subject","subscribe","next","callback","updateSubscriptionProps","skipEarlySubscription","useEffect","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","useController","shouldUnregister","setInputStateValue","_formValues","_defaultValues","values","registerProps","register","rules","updateMounted","useCallback","field","_fields","_f","mount","_shouldUnregisterField","_options","isNameInFieldArray","_names","array","_stateFlags","action","unregister","onChange","event","target","isCheckBoxInput","checked","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","validateAllFieldCriteria","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","_fieldIds","keyName","map","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","slice","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","fieldValues","cloneObject","Set","isFunction","createSubject","_observers","observers","observer","subscription","tearDowns","add","push","teardown","createSubscription","subscriber","closed","createSubscriber","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","window","document","isHTMLElement","contains","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","schemaErrorLookup","fieldName","join","foundError","pop","setDirtyFields","defaultValues","parentNode","parentName","deepMerge","targetValue","sourceValue","isString","isValidElement","RegExp","getValidateError","isMessage","validationData","isRegex","async","inputValue","shouldUseNativeValidation","required","maxLength","minLength","min","max","pattern","validate","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","reValidateMode","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","watch","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","isFieldWatched","isBlurEvent","watchAll","has","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","updateFieldArrayDirty","setFieldArrayDirtyFields","unsetEmptyArray","shouldRenderByError","previousFieldError","shouldUpdateValid","wait","delayError","args","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","getValues","_getWatch","isGlobal","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","handleChange","shouldSkipValidation","deps","skipValidation","isWatched","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","all","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","live","_removeUnmounted","_updateFieldArray","method","shouldSetValues","shouldSetFields","argA","argB","_getFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","setValue","isFieldArray","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","clearErrors","inputName","setError","setFocus","render","Provider","children","setFields","mapIds","fieldArrayName","updateValues","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","omitKeys","watchField","then","swap","mapCurrentIds","swapArrayAt","move","moveArrayAt","prependAt","fillEmptyArray","getFocusFieldName","appendValue","appendAt","remove","removeArrayAt","insertAt","update","updateAt","_formControl","updateValue"],"mappings":"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"}