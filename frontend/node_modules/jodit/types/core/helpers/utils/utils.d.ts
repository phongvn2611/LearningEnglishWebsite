/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2021 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
import type { CanPromise, IControlType, IDictionary, IViewBased, Nullable, IJodit, RejectablePromise } from '../../../types';
/**
 * Call function with parameters
 *
 * @example
 * ```js
 * const f = Math.random();
 * Jodit.modules.Helpers.call(f > 0.5 ? Math.ceil : Math.floor, f);
 * ```
 */
export declare function call<T extends any[], R>(func: (...args: T) => R, ...args: T): R;
/**
 * Get attribute
 */
export declare function attr(elm: Element, key: string): null | string;
/**
 * Remove attribute
 */
export declare function attr(elm: Element, key: string, value: null): null | string;
/**
 * Set attribute
 */
export declare function attr(elm: Element, key: string, value: string | number | boolean | undefined | null): null;
/**
 * Set or remove several attributes
 */
export declare function attr(elm: Element, attributes: IDictionary<string | number | boolean | null>): null;
/**
 * Mark element for debugging
 */
export declare function markOwner(jodit: IViewBased, elm: HTMLElement): void;
export declare function callPromise(condition: CanPromise<unknown>, callback: () => CanPromise<any>): CanPromise<void>;
/**
 * Reset Vanila JS native function
 * @example
 * ```js
 * reset('Array.from')(Set([1,2,3])) // [1, 2, 3]
 * ```
 */
export declare const reset: <T extends Function>(key: string) => Nullable<T>;
/**
 * Allow load image in promise
 */
export declare const loadImage: (src: string, jodit: IViewBased) => RejectablePromise<HTMLImageElement>;
export declare const keys: (obj: object, own?: boolean) => string[];
/**
 * Memorize last user chose
 */
export declare const memorizeExec: <T extends IJodit = IJodit>(editor: T, _: unknown, { control }: {
    control: IControlType<T, import("../../../types").IToolbarButton>;
}, preProcessValue?: ((value: string) => string) | undefined) => void | false;
