/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2021 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
import './uploader.less';
import type { BuildDataResult, HandlerError, HandlerSuccess, IDictionary, IUploader, IUploaderOptions, IViewBased } from '../../types';
import { ViewComponent } from '../../core/component/';
declare module '../../config' {
    interface Config {
        /**
         * Enable drag and drop file editor
         */
        enableDragAndDropFileToEditor: boolean;
        uploader: IUploaderOptions<Uploader>;
    }
}
export declare class Uploader extends ViewComponent implements IUploader {
    /** @override */
    className(): string;
    /**
     * Convert dataURI to Blob
     */
    static dataURItoBlob(dataURI: string): Blob;
    private path;
    private source;
    options: IUploaderOptions<Uploader>;
    get o(): this['options'];
    buildData(data: FormData | IDictionary<string> | string): BuildDataResult;
    private ajaxInstances;
    private send;
    /**
     * Send files to server
     */
    private sendFiles;
    /**
     * It sets the path for uploading files
     */
    setPath(path: string): void;
    /**
     * It sets the source for connector
     */
    setSource(source: string): void;
    /**
     * Set the handlers Drag and Drop toWYSIWYG `$form`
     *
     * @param form - Form or any Node on which you can drag and drop the file. In addition will be processed
     * <code>&lt;input type="file" &gt;</code>
     * @param handlerSuccess - The function be called when a successful uploading files
     * toWYSIWYG the server
     * @param handlerError - The function that will be called during a failed download files a server
     * @example
     * ```javascript
     * var $form = jQuery('<form><input type="text" typpe="file"></form>');
     * jQuery('body').append($form);
     * Jodit.editors.someidfoeditor.uploader.bind($form[0], function (files) {
     *     var i;
     *     for (i = 0; i < data.files.length; i += 1) {
     *         parent.s.insertImage(data.files[i])
     *     }
     * });
     * ```
     */
    bind(form: HTMLElement, handlerSuccess?: HandlerSuccess, handlerError?: HandlerError): void;
    /**
     * Upload images toWYSIWYG a server by its URL, making it through the connector server.
     */
    uploadRemoteImage(url: string, handlerSuccess?: HandlerSuccess, handlerError?: HandlerError): void;
    constructor(editor: IViewBased, options?: IUploaderOptions<Uploader>);
    destruct(): any;
}
