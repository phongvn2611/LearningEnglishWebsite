/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2021 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
import './search.less';
import type { ISelectionRange, IJodit, IPlugin } from '../../types';
import { Plugin } from '../../core/plugin';
declare module '../../config' {
    interface Config {
        /**
         * Enable custom search plugin
         * ![search](https://user-images.githubusercontent.com/794318/34545433-cd0a9220-f10e-11e7-8d26-7e22f66e266d.gif)
         */
        useSearch: boolean;
    }
}
/**
 * Search plugin. it is used for custom search in text
 * ![search](https://user-images.githubusercontent.com/794318/34545433-cd0a9220-f10e-11e7-8d26-7e22f66e266d.gif)
 *
 * @example
 * ```typescript
 * var jodit = new Jodit('#editor', {
 *  useSearch: false
 * });
 * // or
 * var jodit = new Jodit('#editor', {
 *  disablePlugins: 'search'
 * });
 * ```
 */
export declare class search extends Plugin {
    buttons: IPlugin['buttons'];
    static getSomePartOfStringIndex(needle: string, haystack: string, start?: boolean): number | false;
    static findSomePartOfString(needle: string, haystack: string, start?: boolean, getIndex?: boolean): boolean | string | number;
    private template;
    private isOpened;
    private selInfo;
    private current;
    private eachMap;
    private updateCounters;
    private boundAlreadyWas;
    private tryScrollToElement;
    searchBox: HTMLDivElement;
    queryInput: HTMLInputElement;
    replaceInput: HTMLInputElement;
    closeButton: HTMLButtonElement;
    nextButton: HTMLButtonElement;
    prevButton: HTMLButtonElement;
    replaceButton: HTMLButtonElement;
    counterBox: HTMLSpanElement;
    calcCounts: (query: string, current?: ISelectionRange | false) => [number, number];
    findAndReplace: (start: Node | null, query: string) => boolean;
    findAndSelect: (start: Node | null, query: string, next: boolean) => boolean;
    find: (start: Node | null, query: string, next: boolean, deep: number, range: Range) => false | ISelectionRange;
    open: (searchAndReplace?: boolean) => void;
    close: () => void;
    /** @override */
    afterInit(editor: IJodit): void;
    /** @override */
    beforeDestruct(jodit: IJodit): void;
    /**
     * Calculate position if sticky is enabled
     */
    private calcSticky;
}
