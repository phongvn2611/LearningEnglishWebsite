/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2021 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
import type { HTMLTagNames, IDictionary, IJodit } from '../../types';
import { Plugin } from '../../core/plugin';
declare module '../../config' {
    interface Config {
        cleanHTML: {
            timeout: number;
            /**
             * Replace &amp;nbsp; toWYSIWYG plain space
             */
            replaceNBSP: boolean;
            fillEmptyParagraph: boolean;
            removeEmptyElements: boolean;
            replaceOldTags: IDictionary<HTMLTagNames> | false;
            /**
             * Remove onError attributes
             */
            removeOnError: boolean;
            /**
             * Safe href="javascript:" links
             */
            safeJavaScriptLink: boolean;
            /**
             * The allowTags option defines which elements will remain in the
             * edited text when the editor saves. You can use this limit the returned HTML.
             * @example
             * ```javascript
             * var jodit = new Jodit('#editor', {
             *    cleanHTML: {
             *       cleanOnPaste: false
             *    }
             * });
             * ```
             * @example
             * ```javascript
             * var editor = Jodit('#editor', {
             *     cleanHTML: {
             *         allowTags: 'p,a[href],table,tr,td, img[src=1.png]' // allow only <p>,<a>,<table>,<tr>,<td>,<img> tags and
             *         for <a> allow only `href` attribute and <img> allow only `src` attribute == '1.png'
             *     }
             * });
             * editor.value = 'Sorry! <strong>Goodby</strong>\
             * <span>mr.</span> <a style="color:red" href="http://xdsoft.net">Freeman</a>';
             * console.log(editor.value); //Sorry! <a href="http://xdsoft.net">Freeman</a>
             * ```
             *
             * @example
             * ```javascript
             * var editor = Jodit('#editor', {
             *     cleanHTML: {
             *         allowTags: {
             *             p: true,
             *             a: {
             *                 href: true
             *             },
             *             table: true,
             *             tr: true,
             *             td: true,
             *             img: {
             *                 src: '1.png'
             *             }
             *         }
             *     }
             * });
             * ```
             */
            allowTags: false | string | IDictionary<string>;
            denyTags: false | string | IDictionary<string>;
        };
    }
}
/**
 * Clean HTML after removeFormat and insertHorizontalRule command
 */
export declare class cleanHtml extends Plugin {
    /** @override */
    buttons: Plugin['buttons'];
    /** @override */
    protected afterInit(jodit: IJodit): void;
    /**
     * Replaces an element with a newer one if specified in the configuration match
     */
    private replaceIfMatched;
    /**
     * Clean HTML code on every change
     */
    private onChangeCleanHTML;
    private allowEdit;
    private visitNode;
    private static getHash;
    private allowTagsHash;
    private denyTagsHash;
    /**
     * Remove invisible chars if node has another chars
     */
    private onKeyUpCleanUp;
    private beforeCommand;
    /**
     * Command: removeFormat
     */
    private onRemoveFormat;
    /**
     * For collapsed selection move cursor outside or split inline block
     */
    private removeFormatForCollapsedSelection;
    /**
     * Element has inline display mode
     */
    private isInlineBlock;
    /**
     * Remove formatting for all selected elements
     */
    private removeFormatForSelection;
    private isRemovableNode;
    private static hasNotEmptyTextSibling;
    /**
     * Event handler when manually assigning a value to the HTML editor.
     */
    protected onBeforeSetNativeEditorValue(data: {
        value: string;
    }): boolean;
    protected onSafeHTML(sandBox: HTMLElement): void;
    /** @override */
    protected beforeDestruct(): void;
}
