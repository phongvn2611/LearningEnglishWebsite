/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2021 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
import type { IExtraPlugin, IDictionary, IViewOptions, NodeFunction, Attributes, ButtonsOption, Controls, IControlType, IUIButtonState, Nullable } from './types';
/**
 * Default Editor's Configuration
 */
export declare class Config implements IViewOptions {
    namespace: string;
    /**
     * When this option is enabled, the editor's content will be placed in an iframe and isolated from the rest of the page.
     *
     * @example
     * ```javascript
     * new Jodit('#editor', {
     *    iframe = true;
     *    iframeStyle = 'html{margin: 0px;}body{padding:10px;background:transparent;color:#000;position:relative;z-index:2;\
     *    user-select:auto;margin:0px;overflow:hidden;}body:after{content:"";clear:both;display:block}';
     * });
     * ```
     */
    iframe: boolean;
    commandToHotkeys: IDictionary<string | string[]>;
    license: string;
    preset: string;
    presets: IDictionary;
    ownerDocument: Document;
    ownerWindow: Window;
    /**
     * Shadow root if Jodit was created in it
     */
    shadowRoot: Nullable<ShadowRoot>;
    /**
     * Dictionary of variable values in css, a complete list can be found here
     * https://github.com/xdan/jodit/blob/master/src/styles/variables.less#L25
     *
     * @example
     * ```js
     * const editor = Jodit.make('#editor', {
     *   styleValues: {
     *		'color-text': 'red',
     *		colorBorder: 'black',
     *		'color-panel': 'blue'
     *   }
     * });
     * ```
     */
    styleValues: IDictionary;
    /**
     * z-index For editor
     */
    zIndex: number;
    /**
     * Change the read-only state of the editor
     */
    readonly: boolean;
    /**
     * Change the disabled state of the editor
     */
    disabled: boolean;
    activeButtonsInReadOnly: string[];
    /**
     * Size of icons in the toolbar (can be "small", "middle", "large")
     *
     * @example
     * ```javascript
     * var editor  = new  Jodit(".dark_editor", {
     *      toolbarButtonSize: "small"
     * });
     * ```
     */
    toolbarButtonSize: IUIButtonState['size'];
    /**
     * Allow navigation in the toolbar of the editor by Tab key
     */
    allowTabNavigation: boolean;
    /**
     * Inline editing mode
     */
    inline: boolean;
    /**
     * Theme (can be "dark")
     * @example
     * ```javascript
     * var editor  = new  Jodit(".dark_editor", {
     *      theme: "dark"
     * });
     * ```
     */
    theme: string;
    /**
     * if set true then the current mode is saved in a cookie , and is restored after a reload of the page
     */
    saveModeInStorage: boolean;
    /**
     * Options specifies whether the editor is to have its spelling and grammar checked or not
     * @see {@link http://www.w3schools.com/tags/att_global_spellcheck.asp}
     */
    spellcheck: boolean;
    /**
     * Class name that can be appended to the editor
     *
     * @see {@link Jodit.defaultOptions.iframeCSSLinks|iframeCSSLinks}
     * @see {@link Jodit.defaultOptions.iframeStyle|iframeStyle}
     *
     * @example
     * ```javascript
     * new Jodit('#editor', {
     *    editorCssClass: 'some_my_class'
     * });
     * ```
     * ```html
     * <style>
     * .some_my_class p{
     *    line-height: 16px;
     * }
     * </style>
     * ```
     */
    editorCssClass: false | string;
    /**
     * The font of editor
     *
     * @example
     * ```javascript
     * new Jodit('#editor', {
     * 		style: {
     * 		 font: '12px Arial'
     * 		}
     * });
     * ```
     */
    style: false | IDictionary;
    /**
     * After all changes in editors for textarea will call change trigger
     *
     * @example
     * ```javascript
     * var editor = new Jodit('#editor');
     * document.getElementById('editor').addEventListener('change', function () {
     *      console.log(this.value);
     * })
     * ```
     */
    triggerChangeEvent: boolean;
    /**
     * The writing direction of the language which is used to create editor content. Allowed values are: ''
     * (an empty string) – Indicates that content direction will be the same as either the editor UI direction or
     * the page element direction. 'ltr' – Indicates a Left-To-Right text direction (like in English).
     * 'rtl' – Indicates a Right-To-Left text direction (like in Arabic).
     * @example
     * ```javascript
     * new Jodit('.editor', {
     *    direction: 'rtl'
     * })
     * ```
     */
    direction: 'rtl' | 'ltr' | '';
    /**
     * Language by default. if `auto` language set by document.documentElement.lang ||
     * (navigator.language && navigator.language.substr(0, 2)) ||
     * (navigator.browserLanguage && navigator.browserLanguage.substr(0, 2)) || 'en'
     *
     * @example
     * ```html
     * <!-- include in you page lang file -->
     * <script src="jodit/lang/de.js"></script>
     * <script>
     * var editor = new Jodit('.editor', {
     *    language: 'de'
     * });
     * </script>
     * ```
     */
    language: string;
    /**
     * if true all Lang.i18n(key) return `{key}`
     *
     * @example
     * ```html
     * <script>
     * var editor = new Jodit('.editor', {
     *    debugLanguage: true
     * });
     *
     * console.log(editor.i18n("Test")); // {Test}
     * </script>
     * ```
     */
    debugLanguage: boolean;
    /**
     * Collection of language pack data `{en: {'Type something': 'Type something', ...}}`
     *
     * @example
     * ```javascript
     * var editor = new Jodit('#editor', {
     *     language: 'ru',
     *     i18n: {
     *         ru: {
     *            'Type something': 'Начните что-либо вводить'
     *         }
     *     }
     * });
     * console.log(editor.i18n('Type something')) //Начните что-либо вводить
     * ```
     */
    i18n: false;
    /**
     * The tabindex global attribute is an integer indicating if the element can take
     * input focus (is focusable), if it should participate to sequential keyboard navigation,
     * and if so, at what position. It can take several values
     */
    tabIndex: number;
    /**
     * Boolean, whether the toolbar should be shown.
     * Alternatively, a valid css-selector-string to use an element as toolbar container.
     */
    toolbar: boolean | string | HTMLElement;
    /**
     * Boolean, whether the statusbar should be shown.
     */
    statusbar: boolean;
    /**
     * Show tooltip after mouse enter on the button
     */
    showTooltip: boolean;
    /**
     * Delay before show tooltip
     */
    showTooltipDelay: number;
    /**
     * Instead of create custop tooltip - use native title tooltips
     */
    useNativeTooltip: boolean;
    /**
     * Element that will be created when you press Enter
     */
    enter: 'p' | 'div' | 'br';
    /**
     * Use when you need insert new block element
     * use enter option if not set
     */
    enterBlock: 'p' | 'div';
    /**
     * Jodit.MODE_WYSIWYG The HTML editor allows you to write like MSWord,
     * Jodit.MODE_SOURCE syntax highlighting source editor
     * @example
     * ```javascript
     * var editor = new Jodit('#editor', {
     *     defaultMode: Jodit.MODE_SPLIT
     * });
     * console.log(editor.getRealMode())
     * ```
     */
    defaultMode: number;
    /**
     * Use split mode
     */
    useSplitMode: boolean;
    /**
     * The colors in HEX representation to select a color for the background and for the text in colorpicker
     * @example
     * ```javascript
     *  new Jodit('#editor', {
     *     colors: ['#ff0000', '#00ff00', '#0000ff']
     * })
     * ```
     */
    colors: IDictionary<string[]> | string[];
    /**
     * The default tab color picker
     * @example
     * ```javascript
     *  new Jodit('#editor2', {
     *     colorPickerDefaultTab: 'color'
     * })
     * ```
     */
    colorPickerDefaultTab: 'background' | 'color';
    /**
     * Image size defaults to a larger image
     */
    imageDefaultWidth: number;
    /**
     * Do not display these buttons that are on the list
     * @example
     * ```javascript
     * Jodit.make('#editor2', {
     *     removeButtons: ['hr', 'source']
     * });
     * ```
     */
    removeButtons: string[];
    /**
     * Do not init these plugins
     * @example
     * ```typescript
     * var editor = new Jodit('.editor', {
     *    disablePlugins: 'table,iframe'
     * });
     * //or
     * var editor = new Jodit('.editor', {
     *    disablePlugins: ['table', 'iframe']
     * });
     * ```
     */
    disablePlugins: string[] | string;
    /**
     * Init and download extra plugins
     * @example
     * ```typescript
     * var editor = new Jodit('.editor', {
     *    extraPlugins: ['emoji']
     * });
     * ```
     * It will try load %SCRIPT_PATH%/plugins/emoji/emoji.js and after load will try init it
     */
    extraPlugins: Array<string | IExtraPlugin>;
    /**
     * Base path for download extra plugins
     */
    basePath?: string;
    /**
     * This buttons list will be added to option.buttons
     */
    extraButtons: Array<string | IControlType>;
    /**
     * By default, you can only install an icon from the Jodit suite.
     * You can add your icon to the set using the `Jodit.modules.Icon.set (name, svg Code)` method.
     * But for a declarative declaration, you can use this option.
     *
     * @example
     * ```js
     * Jodit.modules.Icon.set('someIcon', '<svg><path.../></svg>');
     * const editor = Jodit.make({
     *   extraButtons: [{
     *     name: 'someButton',
     *     icon: 'someIcon'
     *   }]
     * });
     *
     * @example
     * const editor = Jodit.make({
     *   extraIcons: {
     *     someIcon: '<svg><path.../></svg>'
     *   },
     *   extraButtons: [{
     *     name: 'someButton',
     *     icon: 'someIcon'
     *   }]
     * });
     * ```
     * @example
     * ```js
     * const editor = Jodit.make({
     *   extraButtons: [{
     *     name: 'someButton',
     *     icon: '<svg><path.../></svg>'
     *   }]
     * });
     * ```
     */
    extraIcons: IDictionary<string>;
    /**
     * Default attributes for created inside editor elements
     */
    createAttributes: IDictionary<Attributes | NodeFunction>;
    /**
     * The width of the editor, accepted as the biggest. Used to the responsive version of the editor
     */
    sizeLG: number;
    /**
     * The width of the editor, accepted as the medium. Used to the responsive version of the editor
     */
    sizeMD: number;
    /**
     * The width of the editor, accepted as the small. Used to the responsive version of the editor
     */
    sizeSM: number;
    /**
     * The list of buttons that appear in the editor's toolbar on large places (≥ options.sizeLG).
     * Note - this is not the width of the device, the width of the editor
     * @example
     * ```javascript
     * new Jodit('#editor', {
     *     buttons: ['bold', 'italic', 'source'],
     *     buttonsMD: ['bold', 'italic'],
     *     buttonsXS: ['bold', 'fullsize'],
     * });
     * ```
     * @example
     * ```javascript
     * new Jodit('#editor2', {
     *     buttons: [{
     *         name: 'enty',
     *         icon: 'source',
     *         exec: function () {
     *             var dialog = new Jodit.modules.Dialog(this),
     *                 div = document.createElement('div'),
     *                 text = document.createElement('textarea');
     *             div.textContent = this.val();
     *             dialog.setHeader('Source code');
     *             dialog.setContent(text);
     *             dialog.setSize(400, 300);
     *             dom(text)
     *                 .css({
     *                     width: '100%',
     *                     height: '100%'
     *                 })
     *                 .val(div.innerHTML.replace(/<br>/g, '\n'));
     *             dialog.{@link module:Dialog~open|open}();
     *         }
     *     }]
     * });
     * ```
     * @example
     * ```javascript
     * new Jodit('#editor2', {
     *     buttons: Jodit.defaultOptions.buttons.concat([{
     *        name: 'listsss',
     *        iconURL: 'stuf/dummy.png',
     *        list: {
     *            h1: 'insert Header 1',
     *            h2: 'insert Header 2',
     *            clear: 'Empty editor',
     *        },
     *        exec: ({originalEvent, control, btn}) => {
     *             var key = control.args[0],
     *                value = control.args[1];
     *             if (key === 'clear') {
     *                 this.val('');
     *                 return;
     *             }
     *             this.s.insertNode(this.c.element(key, ''));
     *             this.e.fire('errorMessage', 'Was inserted ' + value);
     *        },
     *        template: function (key, value) {
     *            return '<div>' + value + '</div>';
     *        }
     *  });
     * ```
     */
    buttons: ButtonsOption;
    /**
     * The list of buttons that appear in the editor's toolbar on medium places (≥ options.sizeMD).
     */
    buttonsMD: ButtonsOption;
    /**
     * The list of buttons that appear in the editor's toolbar on small places (≥ options.sizeSM).
     */
    buttonsSM: ButtonsOption;
    /**
     * The list of buttons that appear in the editor's toolbar on extra small places `(< options.sizeSM)`.
     */
    buttonsXS: ButtonsOption;
    /**
     * Behavior for buttons
     */
    controls: Controls;
    events: IDictionary<(...args: any[]) => any>;
    /**
     * Buttons in toolbat without SVG - only texts
     */
    textIcons: boolean;
    /**
     * shows a INPUT[type=color] to open the browser color picker, on the right bottom of widget color picker
     */
    showBrowserColorPicker: boolean;
    private static __defaultOptions;
    static get defaultOptions(): Config;
}
