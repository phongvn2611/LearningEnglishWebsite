{"ast":null,"code":"var _jsxFileName = \"E:\\\\TLCN\\\\LearningEnglishWebsite\\\\frontend\\\\src\\\\components\\\\UI\\\\InfiniteScroll\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InfiniteScroll(props) {\n  _s();\n\n  const {\n    className,\n    onTouchAnchor,\n    threshold\n  } = props;\n  const observer = useRef(new IntersectionObserver(entries => {\n    const first = entries[0];\n\n    if (first.isIntersecting) {\n      onTouchAnchor();\n    }\n  }, {\n    threshold\n  }));\n  const [element, setElement] = useState(null);\n  useEffect(() => {\n    const currentElement = element;\n    const currentObserver = observer.current;\n\n    if (currentElement) {\n      currentObserver.observe(currentElement);\n    }\n\n    return () => {\n      if (currentElement) {\n        currentObserver.unobserve(currentElement);\n      }\n    };\n  }, [element]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    ref: setElement,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InfiniteScroll, \"tWMsxjDqijh9Cu6Js+k3W070yOQ=\");\n\n_c = InfiniteScroll;\nInfiniteScroll.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.string,\n  onTouchAnchor: PropTypes.func,\n  threshold: PropTypes.number\n};\nInfiniteScroll.defaultProps = {\n  className: '',\n  onTouchAnchor: function () {},\n  threshold: 0.5\n};\nexport default InfiniteScroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfiniteScroll\");","map":{"version":3,"sources":["E:/TLCN/LearningEnglishWebsite/frontend/src/components/UI/InfiniteScroll/index.js"],"names":["PropTypes","React","useEffect","useRef","useState","InfiniteScroll","props","className","onTouchAnchor","threshold","observer","IntersectionObserver","entries","first","isIntersecting","element","setElement","currentElement","currentObserver","current","observe","unobserve","children","propTypes","any","string","func","number","defaultProps"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAC7B,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,aAAb;AAA4BC,IAAAA;AAA5B,MAA0CH,KAAhD;AACA,QAAMI,QAAQ,GAAGP,MAAM,CACrB,IAAIQ,oBAAJ,CACGC,OAAD,IAAa;AACX,UAAMC,KAAK,GAAGD,OAAO,CAAC,CAAD,CAArB;;AACA,QAAIC,KAAK,CAACC,cAAV,EAA0B;AACxBN,MAAAA,aAAa;AACd;AACF,GANH,EAOE;AAAEC,IAAAA;AAAF,GAPF,CADqB,CAAvB;AAWA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,cAAc,GAAGF,OAAvB;AACA,UAAMG,eAAe,GAAGR,QAAQ,CAACS,OAAjC;;AAEA,QAAIF,cAAJ,EAAoB;AAClBC,MAAAA,eAAe,CAACE,OAAhB,CAAwBH,cAAxB;AACD;;AAED,WAAO,MAAM;AACX,UAAIA,cAAJ,EAAoB;AAClBC,QAAAA,eAAe,CAACG,SAAhB,CAA0BJ,cAA1B;AACD;AACF,KAJD;AAKD,GAbQ,EAaN,CAACF,OAAD,CAbM,CAAT;AAeA,sBACE;AAAK,IAAA,SAAS,EAAER,SAAhB;AAA2B,IAAA,GAAG,EAAES,UAAhC;AAAA,cACGV,KAAK,CAACgB;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAnCQjB,c;;KAAAA,c;AAqCTA,cAAc,CAACkB,SAAf,GAA2B;AACzBD,EAAAA,QAAQ,EAAEtB,SAAS,CAACwB,GADK;AAEzBjB,EAAAA,SAAS,EAAEP,SAAS,CAACyB,MAFI;AAGzBjB,EAAAA,aAAa,EAAER,SAAS,CAAC0B,IAHA;AAIzBjB,EAAAA,SAAS,EAAET,SAAS,CAAC2B;AAJI,CAA3B;AAOAtB,cAAc,CAACuB,YAAf,GAA8B;AAC5BrB,EAAAA,SAAS,EAAE,EADiB;AAE5BC,EAAAA,aAAa,EAAE,YAAY,CAAE,CAFD;AAG5BC,EAAAA,SAAS,EAAE;AAHiB,CAA9B;AAMA,eAAeJ,cAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\n\nfunction InfiniteScroll(props) {\n  const { className, onTouchAnchor, threshold } = props;\n  const observer = useRef(\n    new IntersectionObserver(\n      (entries) => {\n        const first = entries[0];\n        if (first.isIntersecting) {\n          onTouchAnchor();\n        }\n      },\n      { threshold },\n    ),\n  );\n  const [element, setElement] = useState(null);\n\n  useEffect(() => {\n    const currentElement = element;\n    const currentObserver = observer.current;\n\n    if (currentElement) {\n      currentObserver.observe(currentElement);\n    }\n\n    return () => {\n      if (currentElement) {\n        currentObserver.unobserve(currentElement);\n      }\n    };\n  }, [element]);\n\n  return (\n    <div className={className} ref={setElement}>\n      {props.children}\n    </div>\n  );\n}\n\nInfiniteScroll.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.string,\n  onTouchAnchor: PropTypes.func,\n  threshold: PropTypes.number,\n};\n\nInfiniteScroll.defaultProps = {\n  className: '',\n  onTouchAnchor: function () {},\n  threshold: 0.5,\n};\n\nexport default InfiniteScroll;\n"]},"metadata":{},"sourceType":"module"}