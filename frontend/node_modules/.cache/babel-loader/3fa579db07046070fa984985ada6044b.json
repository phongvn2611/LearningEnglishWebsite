{"ast":null,"code":"var _jsxFileName = \"E:\\\\TLCN\\\\LearningEnglishWebsite\\\\frontend\\\\src\\\\components\\\\QuizAdmin\\\\data.js\",\n    _s = $RefreshSig$();\n\nimport listeningApi from \"apis/listeningApi\";\nimport ListeningDetailModal from \"components/UI/ListeningDetailModal\";\nimport { equalArray } from \"helper\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport ListeningAdmin from \"./index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction QuizAdminData() {\n  _s();\n\n  const [page, setPage] = useState(1);\n  const [sortType, setSortType] = useState(\"Newest\");\n  const [packInfo, setPackInfo] = useState(() => ({\n    topic: \"All\"\n  }));\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const totalPage = useRef(0);\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const settingWordPack = info => {\n    // check old pack vs new pack\n    let isEqual = true;\n\n    if (packInfo !== \"topic\" && packInfo.topic !== info.topic) {\n      isEqual = false;\n    }\n\n    if (isEqual) isEqual = equalArray(packInfo.topic, info.topic);\n    totalPage.current = 0;\n    preSearchList.current = [];\n    setMore(true);\n    setList([]);\n    setPackInfo(info);\n    setPage(1);\n  };\n\n  const onSortTypeChange = (type = \"Newest\") => {\n    if (type === sortType) return;\n    preSearchList.current = [];\n    setSortType(type);\n    setPage(1);\n    setList([]);\n  };\n\n  const onSearchWord = async name => {\n    try {\n      if (name === \"\") {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n\n      const apiRes = await listeningApi.searchListen(name);\n\n      if (apiRes.status === 200) {\n        // const { packList = [] } = apiRes.data.listens;\n        setList(apiRes.data.listens);\n        setMore(false);\n      }\n    } catch (error) {}\n  }; // get word pack\n\n\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        setLoading(true);\n        let apiRes = null;\n\n        if (packInfo.topic === \"All\") {\n          apiRes = await listeningApi.getAllListen(sortType);\n        } else {\n          apiRes = await listeningApi.getListenByTopic(packInfo.topic, sortType);\n        }\n\n        if (apiRes && isSub) {\n          // const { packList = [] } = apiRes.data.listens;\n          const newList = apiRes.data.listens;\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {} finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => isSub = false;\n  }, [page, packInfo, sortType]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListeningAdmin, {\n      list: list,\n      loading: loading,\n      onLoadData: nextPage,\n      more: more,\n      isFirstLoad: isFirstLoad,\n      onSettingWordPack: settingWordPack,\n      onSortTypeChange: onSortTypeChange,\n      onSearchWord: onSearchWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListeningDetailModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(QuizAdminData, \"gr9LrJdCZg3excKaQcaEi6ZkzR4=\");\n\n_c = QuizAdminData;\nexport default QuizAdminData;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizAdminData\");","map":{"version":3,"sources":["E:/TLCN/LearningEnglishWebsite/frontend/src/components/QuizAdmin/data.js"],"names":["listeningApi","ListeningDetailModal","equalArray","React","useEffect","useRef","useState","ListeningAdmin","QuizAdminData","page","setPage","sortType","setSortType","packInfo","setPackInfo","topic","loading","setLoading","list","setList","more","setMore","isFirstLoad","setIsFirstLoad","totalPage","preSearchList","nextPage","current","settingWordPack","info","isEqual","onSortTypeChange","type","onSearchWord","name","apiRes","searchListen","status","data","listens","error","isSub","getAllListen","getListenByTopic","newList"],"mappings":"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","sourcesContent":["import listeningApi from \"apis/listeningApi\";\nimport ListeningDetailModal from \"components/UI/ListeningDetailModal\";\nimport { equalArray } from \"helper\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport ListeningAdmin from \"./index\";\n\nfunction QuizAdminData() {\n  const [page, setPage] = useState(1);\n  const [sortType, setSortType] = useState(\"Newest\");\n  const [packInfo, setPackInfo] = useState(() => ({\n    topic: \"All\",\n  }));\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const totalPage = useRef(0);\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const settingWordPack = (info) => {\n    // check old pack vs new pack\n    let isEqual = true;\n    if (packInfo !== \"topic\" && packInfo.topic !== info.topic) {\n      isEqual = false;\n    }\n    if (isEqual) isEqual = equalArray(packInfo.topic, info.topic);\n\n    totalPage.current = 0;\n    preSearchList.current = [];\n    setMore(true);\n    setList([]);\n    setPackInfo(info);\n    setPage(1);\n  };\n\n  const onSortTypeChange = (type = \"Newest\") => {\n    if (type === sortType) return;\n    preSearchList.current = [];\n    setSortType(type);\n    setPage(1);\n    setList([]);\n  };\n\n  const onSearchWord = async (name) => {\n    try {\n      if (name === \"\") {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n      const apiRes = await listeningApi.searchListen(name);\n      if (apiRes.status === 200) {\n        // const { packList = [] } = apiRes.data.listens;\n        setList(apiRes.data.listens);\n        setMore(false);\n      }\n    } catch (error) {}\n  };\n\n  // get word pack\n  useEffect(() => {\n    let isSub = true;\n    (async function () {\n      try {\n        setLoading(true);\n        let apiRes = null;\n        if (packInfo.topic === \"All\") {\n          apiRes = await listeningApi.getAllListen(sortType);\n        } else {\n          apiRes = await listeningApi.getListenByTopic(\n            packInfo.topic,\n            sortType\n          );\n        }\n        if (apiRes && isSub) {\n          // const { packList = [] } = apiRes.data.listens;\n          const newList = apiRes.data.listens;\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {\n      } finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => (isSub = false);\n  }, [page, packInfo, sortType]);\n\n  return (\n    <>\n      <ListeningAdmin\n        list={list}\n        loading={loading}\n        onLoadData={nextPage}\n        more={more}\n        isFirstLoad={isFirstLoad}\n        onSettingWordPack={settingWordPack}\n        onSortTypeChange={onSortTypeChange}\n        onSearchWord={onSearchWord}\n      />\n      <ListeningDetailModal />\n    </>\n  );\n}\n\nexport default QuizAdminData;\n"]},"metadata":{},"sourceType":"module"}