{"ast":null,"code":"var _jsxFileName = \"E:\\\\TLCN\\\\LearningEnglishWebsite\\\\frontend\\\\src\\\\components\\\\GrammarAdmin\\\\data.js\",\n    _s = $RefreshSig$();\n\nimport grammarApi from 'apis/grammarApi';\nimport GrammarDetailModal from 'components/UI/GrammarDetailModal';\nimport { equalArray } from 'helper';\nimport React, { useEffect, useRef, useState } from 'react';\nimport GrammarAdmin from './index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ListeningAdminData() {\n  _s();\n\n  const [page, setPage] = useState(1);\n  const [packInfo, setPackInfo] = useState(() => ({\n    level: 'All'\n  }));\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const totalPage = useRef(0);\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const settingWordPack = info => {\n    // check old pack vs new pack\n    let isEqual = true;\n\n    if (packInfo !== 'level' && packInfo.level !== info.level) {\n      isEqual = false;\n    }\n\n    if (isEqual) isEqual = equalArray(packInfo.level, info.level);\n    totalPage.current = 0;\n    preSearchList.current = [];\n    setMore(true);\n    setList([]);\n    setPackInfo(info);\n    setPage(1);\n  };\n\n  const onSearchWord = async title => {\n    try {\n      if (title === '') {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n\n      const apiRes = await grammarApi.searchGrammar(title);\n      console.log(apiRes.data);\n\n      if (apiRes.status === 200) {\n        setList(apiRes.data);\n        setMore(false);\n      }\n    } catch (error) {}\n  }; // get word pack\n\n\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        console.log(packInfo);\n        setLoading(true);\n        let apiRes = null;\n\n        if (packInfo.level === 'All') {\n          apiRes = await grammarApi.getAllGrammar();\n        } else {\n          apiRes = await grammarApi.getGrammarByLevel(packInfo.level);\n        }\n\n        if (apiRes && isSub) {\n          const newList = apiRes.data.grammars;\n          console.log(apiRes.data.grammars);\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {} finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => isSub = false;\n  }, [page, packInfo]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GrammarAdmin, {\n      list: list,\n      loading: loading,\n      onLoadData: nextPage,\n      more: more,\n      isFirstLoad: isFirstLoad,\n      onSettingWordPack: settingWordPack,\n      onSearchWord: onSearchWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GrammarDetailModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ListeningAdminData, \"YrBlOjfdCcsyQA1LVBgY6vi3vGM=\");\n\n_c = ListeningAdminData;\nexport default ListeningAdminData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListeningAdminData\");","map":{"version":3,"sources":["E:/TLCN/LearningEnglishWebsite/frontend/src/components/GrammarAdmin/data.js"],"names":["grammarApi","GrammarDetailModal","equalArray","React","useEffect","useRef","useState","GrammarAdmin","ListeningAdminData","page","setPage","packInfo","setPackInfo","level","loading","setLoading","list","setList","more","setMore","isFirstLoad","setIsFirstLoad","totalPage","preSearchList","nextPage","current","settingWordPack","info","isEqual","onSearchWord","title","apiRes","searchGrammar","console","log","data","status","error","isSub","getAllGrammar","getGrammarByLevel","newList","grammars"],"mappings":"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","sourcesContent":["import grammarApi from 'apis/grammarApi';\nimport GrammarDetailModal from 'components/UI/GrammarDetailModal';\nimport { equalArray } from 'helper';\nimport React, { useEffect, useRef, useState } from 'react';\nimport GrammarAdmin from './index';\n\n\nfunction ListeningAdminData() {\n  const [page, setPage] = useState(1);\n  const [packInfo, setPackInfo] = useState(() => ({\n    level: 'All',\n  }));\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const totalPage = useRef(0);\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const settingWordPack = (info) => {\n    // check old pack vs new pack\n    let isEqual = true;\n    if (packInfo!== 'level' && packInfo.level !== info.level) {\n      isEqual = false;\n    }\n    if (isEqual) isEqual = equalArray(packInfo.level, info.level);\n\n    totalPage.current = 0;\n    preSearchList.current = [];\n    setMore(true);\n    setList([]);\n    setPackInfo(info);\n    setPage(1);\n  };\n\n  const onSearchWord = async (title) => {\n    try {\n      if (title === '') {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n      const apiRes = await grammarApi.searchGrammar(title);\n      console.log(apiRes.data);\n      if (apiRes.status === 200) {\n        setList(apiRes.data);\n        setMore(false);\n      }\n    } catch (error) {}\n  };\n\n\n  // get word pack\n  useEffect(() => {\n    let isSub = true;\n    (async function () {\n      try {\n\n        console.log(packInfo);\n        setLoading(true);\n       let apiRes = null\n         if(packInfo.level ==='All'){\n           apiRes = await grammarApi.getAllGrammar();\n         }\n         else{\n          apiRes = await grammarApi.getGrammarByLevel(packInfo.level);\n       }\n        if (apiRes && isSub) {\n          const newList = apiRes.data.grammars;\n          console.log(apiRes.data.grammars)\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {\n      } finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => (isSub = false);\n  }, [page, packInfo]);\n\n  return (\n    <>\n      <GrammarAdmin\n        list={list}\n        loading={loading}\n        onLoadData={nextPage}\n        more={more}\n        isFirstLoad={isFirstLoad}\n        onSettingWordPack={settingWordPack}\n         onSearchWord={onSearchWord}\n      />\n      <GrammarDetailModal />\n    </>\n  );\n}\n\nexport default ListeningAdminData;\n"]},"metadata":{},"sourceType":"module"}