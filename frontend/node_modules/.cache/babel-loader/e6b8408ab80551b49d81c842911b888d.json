{"ast":null,"code":"var _jsxFileName = \"E:\\\\TLCN\\\\LearningEnglishWebsite\\\\frontend\\\\src\\\\components\\\\GrammarAdmin\\\\CreateGrammar\\\\data.js\",\n    _s = $RefreshSig$();\n\nimport grammarApi from 'apis/grammarApi';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport CreateGrammar from './index';\nimport { setMessage } from 'redux/actions/messageAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst analysisLinkVideo = (linkVideo = '') => {\n  if (typeof linkVideo !== 'string' || linkVideo === '') {\n    return null;\n  }\n\n  let checkVid = linkVideo.includes(\"https://www.youtube.com\");\n\n  if (!checkVid) {\n    checkVid = linkVideo.includes(\"youtu.be/\");\n\n    if (checkVid) {\n      return linkVideo;\n    }\n\n    return null;\n  }\n\n  return linkVideo;\n};\n\nfunction CreateGrammarData() {\n  _s();\n\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async data => {\n    try {\n      setSubmitting(true);\n      const {\n        VidUpload,\n        LinkVideo,\n        ...rest\n      } = data;\n      let dataSend = [];\n\n      if (VidUpload == null) {\n        if (LinkVideo || LinkVideo.trim() != '') {\n          //  console.log(data)\n          const videoUrl = analysisLinkVideo(LinkVideo);\n\n          if (videoUrl == null) {\n            dispatch(setMessage(\"Link video is invalid.\", \"warning\"));\n            setSubmitting(false);\n            return;\n          }\n\n          dataSend = { ...rest,\n            Video: videoUrl\n          };\n        } else {\n          dataSend = { ...rest\n          };\n        }\n      } else {\n        dataSend = { ...rest,\n          Video: VidUpload\n        };\n      }\n\n      console.log(dataSend);\n      const apiRes = await grammarApi.postGrammar(dataSend);\n\n      if (apiRes.status === 200) {\n        dispatch(setMessage(\"Created grammar successfully\", \"success\"));\n        setSubmitting(false);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error, can not create listening.';\n      dispatch(setMessage(message, \"error\"));\n      setSubmitting(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CreateGrammar, {\n    onSubmitForm: handleSubmit,\n    submitting: submitting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateGrammarData, \"5iB+qujXnQj6jBoSGKljUlKKZP8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = CreateGrammarData;\nexport default CreateGrammarData;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateGrammarData\");","map":{"version":3,"sources":["E:/TLCN/LearningEnglishWebsite/frontend/src/components/GrammarAdmin/CreateGrammar/data.js"],"names":["grammarApi","React","useState","useDispatch","CreateGrammar","setMessage","analysisLinkVideo","linkVideo","checkVid","includes","CreateGrammarData","submitting","setSubmitting","dispatch","handleSubmit","data","VidUpload","LinkVideo","rest","dataSend","trim","videoUrl","Video","console","log","apiRes","postGrammar","status","error","message","response"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,aAAP,MAA0B,SAA1B;AACA,SAASC,UAAT,QAA2B,6BAA3B;;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,SAAS,GAAG,EAAb,KAAoB;AAC5C,MAAI,OAAOA,SAAP,KAAqB,QAArB,IAAiCA,SAAS,KAAK,EAAnD,EAAuD;AACrD,WAAO,IAAP;AACD;;AAED,MAAIC,QAAQ,GAAGD,SAAS,CAACE,QAAV,CAAmB,yBAAnB,CAAf;;AACA,MAAG,CAACD,QAAJ,EAAa;AACTA,IAAAA,QAAQ,GAAED,SAAS,CAACE,QAAV,CAAmB,WAAnB,CAAV;;AACA,QAAGD,QAAH,EACA;AACE,aAAOD,SAAP;AACD;;AACD,WAAO,IAAP;AACH;;AACD,SAAOA,SAAP;AACD,CAfD;;AAkBA,SAASG,iBAAT,GAA6B;AAAA;;AAC3B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMW,QAAQ,GAAGV,WAAW,EAA5B;;AAGA,QAAMW,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACnC,QAAI;AACFH,MAAAA,aAAa,CAAC,IAAD,CAAb;AACA,YAAM;AAAEI,QAAAA,SAAF;AAAaC,QAAAA,SAAb;AAAwB,WAAGC;AAA3B,UAAoCH,IAA1C;AACA,UAAII,QAAQ,GAAG,EAAf;;AACA,UAAGH,SAAS,IAAI,IAAhB,EAAqB;AACjB,YAAGC,SAAS,IAAIA,SAAS,CAACG,IAAV,MAAkB,EAAlC,EAAsC;AACxC;AACE,gBAAMC,QAAQ,GAAGf,iBAAiB,CAACW,SAAD,CAAlC;;AACA,cAAII,QAAQ,IAAE,IAAd,EAAoB;AAClBR,YAAAA,QAAQ,CAACR,UAAU,CAAC,wBAAD,EAA2B,SAA3B,CAAX,CAAR;AACAO,YAAAA,aAAa,CAAC,KAAD,CAAb;AACA;AACD;;AACDO,UAAAA,QAAQ,GAAE,EACR,GAAGD,IADK;AAEVI,YAAAA,KAAK,EAAED;AAFG,WAAV;AAID,SAZC,MAaE;AACFF,UAAAA,QAAQ,GAAE,EACR,GAAGD;AADK,WAAV;AAGD;AACF,OAnBD,MAoBI;AACFC,QAAAA,QAAQ,GAAE,EACR,GAAGD,IADK;AAETI,UAAAA,KAAK,EAAEN;AAFE,SAAV;AAID;;AACDO,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACA,YAAMM,MAAM,GAAG,MAAMzB,UAAU,CAAC0B,WAAX,CAAuBP,QAAvB,CAArB;;AAEA,UAAIM,MAAM,CAACE,MAAP,KAAkB,GAAtB,EAA2B;AACzBd,QAAAA,QAAQ,CAACR,UAAU,CAAC,8BAAD,EAAiC,SAAjC,CAAX,CAAR;AACAO,QAAAA,aAAa,CAAC,KAAD,CAAb;AACF;AAED,KAtCD,CAsCE,OAAOgB,KAAP,EAAc;AAAA;;AACd,YAAMC,OAAO,GAAI,oBAAAD,KAAK,CAACE,QAAN,4FAAgBf,IAAhB,8EAAsBc,OAAtB,KACjB,kCADA;AAEEhB,MAAAA,QAAQ,CAACR,UAAU,CAACwB,OAAD,EAAU,OAAV,CAAX,CAAR;AACFjB,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GA7CD;;AA+CA,sBACE,QAAC,aAAD;AAAe,IAAA,YAAY,EAAEE,YAA7B;AAA2C,IAAA,UAAU,EAAEH;AAAvD;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GAvDQD,iB;UAEUP,W;;;KAFVO,iB;AAyDT,eAAeA,iBAAf","sourcesContent":["import grammarApi from 'apis/grammarApi';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport CreateGrammar from './index';\nimport { setMessage } from 'redux/actions/messageAction';\n\nconst analysisLinkVideo = (linkVideo = '') => {\n  if (typeof linkVideo !== 'string' || linkVideo === '') {\n    return null;\n  }\n\n  let checkVid = linkVideo.includes(\"https://www.youtube.com\")\n  if(!checkVid){\n      checkVid =linkVideo.includes(\"youtu.be/\")\n      if(checkVid)\n      {\n        return linkVideo;\n      }\n      return null;\n  }\n  return linkVideo;\n};\n\n\nfunction CreateGrammarData() {\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n\n\n  const handleSubmit = async (data) => {\n    try {\n      setSubmitting(true);\n      const { VidUpload, LinkVideo, ...rest } = data;\n      let dataSend = []\n      if(VidUpload == null){\n          if(LinkVideo || LinkVideo.trim()!='' ){\n        //  console.log(data)\n          const videoUrl = analysisLinkVideo(LinkVideo);\n          if (videoUrl==null) {\n            dispatch(setMessage(\"Link video is invalid.\", \"warning\"));\n            setSubmitting(false);\n            return;\n          }\n          dataSend ={\n            ...rest,\n          Video: videoUrl,\n          };\n        }\n        else{\n          dataSend ={\n            ...rest,\n          };\n        }\n      }\n      else{\n        dataSend ={\n          ...rest,\n         Video: VidUpload,\n        };  \n      }  \n      console.log(dataSend);   \n      const apiRes = await grammarApi.postGrammar(dataSend);\n\n      if (apiRes.status === 200) {\n        dispatch(setMessage(\"Created grammar successfully\", \"success\"));\n        setSubmitting(false);\n     }\n\n    } catch (error) {\n      const message =  error.response?.data?.message ||\n      'Error, can not create listening.';\n        dispatch(setMessage(message, \"error\"));\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <CreateGrammar onSubmitForm={handleSubmit} submitting={submitting} />\n  );\n}\n\nexport default CreateGrammarData;\n"]},"metadata":{},"sourceType":"module"}