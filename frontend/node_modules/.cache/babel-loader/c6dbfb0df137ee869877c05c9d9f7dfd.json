{"ast":null,"code":"import GRAMMAR_CONSTANT from \"../constants/grammarConstant\";\nconst initialState = {\n  questions: [],\n  grammars: [],\n  grammar: [],\n  levels: [],\n  message: null,\n  isGrammarLoading: false\n};\n\nconst grammarReducer = (state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GRAMMAR_CONSTANT.SET_GRAMMAR_LOADING:\n      return { ...state,\n        isGrammarLoading: payload\n      };\n\n    case GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR:\n      return { ...state,\n        grammars: [],\n        message: payload,\n        isGrammarLoading: true\n      };\n\n    case GRAMMAR_CONSTANT.GET_GRAMMAR:\n      return { ...state,\n        grammar: payload.grammar,\n        questions: payload.questions\n      };\n\n    case GRAMMAR_CONSTANT.GET_GRAMMAR_BY_ID:\n      return { ...state,\n        grammar: payload.grammar\n      };\n\n    case GRAMMAR_CONSTANT.CREATE_GRAMMAR:\n      return { ...state,\n        grammar: payload,\n        grammars: [...state.grammars, payload]\n      };\n\n    case GRAMMAR_CONSTANT.EDIT_GRAMMAR:\n      const newGrammars = state.grammars.map(grammar => grammar._id === payload._id ? payload : grammar);\n      return { ...state,\n        grammar: payload,\n        grammars: newGrammars\n      };\n\n    case GRAMMAR_CONSTANT.DELETE_GRAMMAR:\n      return { ...state,\n        grammars: state.grammars.filter(grammar => grammar._id !== payload)\n      };\n\n    case GRAMMAR_CONSTANT.GET_ALL_GRAMMAR:\n      return { ...state,\n        grammars: payload\n      };\n\n    case GRAMMAR_CONSTANT.GET_GRAMMAR_BY_LEVEL:\n      return { ...state,\n        grammars: payload\n      };\n\n    case GRAMMAR_CONSTANT.GET_GRAMMAR_LEVELS:\n      return { ...state,\n        levels: payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default grammarReducer;","map":{"version":3,"sources":["E:/TLCN/LearningEnglishWebsite/frontend/src/redux/reducers/grammarReducer.js"],"names":["GRAMMAR_CONSTANT","initialState","questions","grammars","grammar","levels","message","isGrammarLoading","grammarReducer","state","action","type","payload","SET_GRAMMAR_LOADING","SET_GRAMMAR_ERROR","GET_GRAMMAR","GET_GRAMMAR_BY_ID","CREATE_GRAMMAR","EDIT_GRAMMAR","newGrammars","map","_id","DELETE_GRAMMAR","filter","GET_ALL_GRAMMAR","GET_GRAMMAR_BY_LEVEL","GET_GRAMMAR_LEVELS"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,8BAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,EADM;AAEjBC,EAAAA,QAAQ,EAAE,EAFO;AAGjBC,EAAAA,OAAO,EAAE,EAHQ;AAIjBC,EAAAA,MAAM,EAAC,EAJU;AAKjBC,EAAAA,OAAO,EAAE,IALQ;AAMjBC,EAAAA,gBAAgB,EAAE;AAND,CAArB;;AAQA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AACvD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKX,gBAAgB,CAACa,mBAAtB;AACE,aAAO,EACL,GAAGJ,KADE;AAELF,QAAAA,gBAAgB,EAAEK;AAFb,OAAP;;AAIF,SAAKZ,gBAAgB,CAACc,iBAAtB;AACE,aAAO,EACL,GAAGL,KADE;AAELN,QAAAA,QAAQ,EAAC,EAFJ;AAGLG,QAAAA,OAAO,EAAEM,OAHJ;AAILL,QAAAA,gBAAgB,EAAE;AAJb,OAAP;;AAMF,SAAKP,gBAAgB,CAACe,WAAtB;AACE,aAAO,EACL,GAAGN,KADE;AAELL,QAAAA,OAAO,EAAEQ,OAAO,CAACR,OAFZ;AAGLF,QAAAA,SAAS,EAAEU,OAAO,CAACV;AAHd,OAAP;;AAKD,SAAKF,gBAAgB,CAACgB,iBAAtB;AACC,aAAO,EACL,GAAGP,KADE;AAELL,QAAAA,OAAO,EAAEQ,OAAO,CAACR;AAFZ,OAAP;;AAIF,SAAKJ,gBAAgB,CAACiB,cAAtB;AACI,aAAO,EACL,GAAGR,KADE;AAELL,QAAAA,OAAO,EAAEQ,OAFJ;AAGLT,QAAAA,QAAQ,EAAE,CAAC,GAAGM,KAAK,CAACN,QAAV,EAAoBS,OAApB;AAHL,OAAP;;AAKJ,SAAKZ,gBAAgB,CAACkB,YAAtB;AACI,YAAMC,WAAW,GAAGV,KAAK,CAACN,QAAN,CAAeiB,GAAf,CAAoBhB,OAAD,IACjCA,OAAO,CAACiB,GAAR,KAAgBT,OAAO,CAACS,GAAxB,GAA8BT,OAA9B,GAAwCR,OAD1B,CAApB;AAGA,aAAO,EACH,GAAGK,KADA;AAEHL,QAAAA,OAAO,EAAEQ,OAFN;AAGHT,QAAAA,QAAQ,EAAEgB;AAHP,OAAP;;AAKJ,SAAKnB,gBAAgB,CAACsB,cAAtB;AACI,aAAO,EACH,GAAGb,KADA;AAEHN,QAAAA,QAAQ,EAAEM,KAAK,CAACN,QAAN,CAAeoB,MAAf,CACTnB,OAAD,IAAaA,OAAO,CAACiB,GAAR,KAAgBT,OADnB;AAFP,OAAP;;AAMJ,SAAKZ,gBAAgB,CAACwB,eAAtB;AACI,aAAO,EACH,GAAGf,KADA;AAEHN,QAAAA,QAAQ,EAAES;AAFP,OAAP;;AAIJ,SAAKZ,gBAAgB,CAACyB,oBAAtB;AACI,aAAO,EACH,GAAGhB,KADA;AAEHN,QAAAA,QAAQ,EAAES;AAFP,OAAP;;AAIJ,SAAKZ,gBAAgB,CAAC0B,kBAAtB;AACI,aAAO,EACH,GAAGjB,KADA;AAEHJ,QAAAA,MAAM,EAAEO;AAFL,OAAP;;AAIJ;AACE,aAAOH,KAAP;AA9DJ;AAgED,CAlED;;AAoEA,eAAeD,cAAf","sourcesContent":["import GRAMMAR_CONSTANT from \"../constants/grammarConstant\";\n\nconst initialState = {\n    questions: [],\n    grammars: [],\n    grammar: [],\n    levels:[],\n    message: null,\n    isGrammarLoading: false,\n}\nconst grammarReducer = (state = initialState, action) => {\n  const { type, payload } = action\n  switch (type) {\n    case GRAMMAR_CONSTANT.SET_GRAMMAR_LOADING:\n      return {\n        ...state,\n        isGrammarLoading: payload,\n      }\n    case GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR:\n      return {\n        ...state,\n        grammars:[],\n        message: payload,\n        isGrammarLoading: true,\n      }\n    case GRAMMAR_CONSTANT.GET_GRAMMAR:\n      return {\n        ...state,\n        grammar: payload.grammar,\n        questions: payload.questions,\n      }\n     case GRAMMAR_CONSTANT.GET_GRAMMAR_BY_ID:\n      return {\n        ...state,\n        grammar: payload.grammar,\n      }\n    case GRAMMAR_CONSTANT.CREATE_GRAMMAR:\n        return {\n          ...state,\n          grammar: payload,\n          grammars: [...state.grammars, payload],\n        }\n    case GRAMMAR_CONSTANT.EDIT_GRAMMAR:\n        const newGrammars = state.grammars.map((grammar) =>\n              grammar._id === payload._id ? payload : grammar\n        )\n        return {\n            ...state,\n            grammar: payload,\n            grammars: newGrammars,\n        }\n    case GRAMMAR_CONSTANT.DELETE_GRAMMAR:\n        return {\n            ...state,\n            grammars: state.grammars.filter(\n            (grammar) => grammar._id !== payload\n            ),\n        }\n    case GRAMMAR_CONSTANT.GET_ALL_GRAMMAR:\n        return {\n            ...state,\n            grammars: payload,\n        }\n    case GRAMMAR_CONSTANT.GET_GRAMMAR_BY_LEVEL:\n        return {\n            ...state,\n            grammars: payload,\n        }\n    case GRAMMAR_CONSTANT.GET_GRAMMAR_LEVELS:\n        return {\n            ...state,\n            levels: payload,\n        }      \n    default:\n      return state\n  }\n}\n\nexport default grammarReducer\n"]},"metadata":{},"sourceType":"module"}