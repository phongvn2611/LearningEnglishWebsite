{"ast":null,"code":"var _jsxFileName = \"E:\\\\TLCN\\\\LearningEnglishWebsite\\\\frontend\\\\src\\\\components\\\\WordUser\\\\Vocabulary\\\\data.js\",\n    _s = $RefreshSig$();\n\nimport commonApi from 'apis/commonApi';\nimport wordApi from 'apis/wordApi';\nimport { equalArray } from 'helper';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { setMessage } from 'redux/actions/messageAction';\nimport Vocabulary from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst perPage = 7;\n\nfunction VocabularyData() {\n  _s();\n\n  const dispatch = useDispatch();\n  const topicParams = useParams().topic;\n  const list = useRef([]); // list store all item to prevent call API when prev button click\n\n  const [currentList, setCurrentList] = useState([]);\n  const [total, setTotal] = useState(-1);\n  const [pageInfo, setPageInfo] = useState({\n    page: 1,\n    packInfo: {\n      topics: [topicParams]\n    }\n  }); // get total word pack\n\n  useEffect(() => {\n    let isSubscribe = true;\n\n    if (total !== -1) {\n      return;\n    }\n\n    (async function getTotalWordPack() {\n      try {\n        const apiRes = await commonApi.getWordTopicTotal(pageInfo.packInfo);\n\n        if (apiRes.status === 200 && isSubscribe) {\n          const total = apiRes.data.total;\n\n          if (total === 0) {\n            dispatch(setMessage(\"No word for this topic.\", \"warning\"));\n          }\n\n          setTotal(total);\n        }\n      } catch (error) {\n        setTotal(0);\n      }\n    })();\n\n    return () => isSubscribe = false;\n  }, [total]); // get word pack when page change\n\n  useEffect(() => {\n    let isSubscribe = true;\n    if (pageInfo.page < list.current.length / perPage) return; // prevent call API when element already exists in the old array\n\n    async function getVocabularyList() {\n      try {\n        const apiRes = await wordApi.getWordTopic(pageInfo.packInfo);\n\n        if (apiRes.status === 200 && isSubscribe) {\n          setCurrentList(apiRes.data);\n          list.current = [...list.current, apiRes.data];\n        }\n      } catch (error) {}\n    }\n\n    isSubscribe && getVocabularyList();\n    return () => isSubscribe = false;\n  }, [pageInfo]);\n  return /*#__PURE__*/_jsxDEV(Vocabulary, {\n    list: currentList,\n    total: total\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VocabularyData, \"RnGZb822f5aQKEBuLANEsqWX1sQ=\", false, function () {\n  return [useDispatch, useParams];\n});\n\n_c = VocabularyData;\nexport default VocabularyData;\n\nvar _c;\n\n$RefreshReg$(_c, \"VocabularyData\");","map":{"version":3,"sources":["E:/TLCN/LearningEnglishWebsite/frontend/src/components/WordUser/Vocabulary/data.js"],"names":["commonApi","wordApi","equalArray","React","useEffect","useRef","useState","useDispatch","useParams","setMessage","Vocabulary","perPage","VocabularyData","dispatch","topicParams","topic","list","currentList","setCurrentList","total","setTotal","pageInfo","setPageInfo","page","packInfo","topics","isSubscribe","getTotalWordPack","apiRes","getWordTopicTotal","status","data","error","current","length","getVocabularyList","getWordTopic"],"mappings":"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","sourcesContent":["import commonApi from 'apis/commonApi';\nimport wordApi from 'apis/wordApi';\nimport { equalArray } from 'helper';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { setMessage } from 'redux/actions/messageAction';\nimport Vocabulary from '.';\n\nconst perPage = 7;\n\nfunction VocabularyData() {\n  const dispatch = useDispatch();\n  const topicParams =useParams().topic;\n\n  const list = useRef([]); // list store all item to prevent call API when prev button click\n  const [currentList, setCurrentList] = useState([]);\n  const [total, setTotal] = useState(-1);\n  const [pageInfo, setPageInfo] = useState({\n    page: 1,\n    packInfo: {\n    topics:[topicParams],\n    }\n  });\n\n  // get total word pack\n  useEffect(() => {\n    let isSubscribe = true;\n\n    if (total !== -1) {\n      return;\n    }\n\n    (async function getTotalWordPack() {\n      try {\n        const apiRes = await commonApi.getWordTopicTotal(pageInfo.packInfo);\n\n        if (apiRes.status === 200 && isSubscribe) {\n          const total = apiRes.data.total;\n          if (total === 0) {\n            dispatch(\n              setMessage(\"No word for this topic.\",\"warning\")\n            );\n          }\n          setTotal(total);\n        \n        }\n      } catch (error) {\n        setTotal(0);\n      }\n    })();\n\n    return () => (isSubscribe = false);\n  }, [total]);\n\n\n  // get word pack when page change\n  useEffect(() => {\n    let isSubscribe = true;\n    if (pageInfo.page < list.current.length / perPage) return; // prevent call API when element already exists in the old array\n\n    async function getVocabularyList() {\n      try {\n        const apiRes = await wordApi.getWordTopic(pageInfo.packInfo);\n\n        if (apiRes.status === 200 && isSubscribe) {\n          setCurrentList(apiRes.data);\n          list.current = [...list.current, apiRes.data];\n        }\n      } catch (error) {}\n    }\n\n    isSubscribe && getVocabularyList();\n\n    return () => (isSubscribe = false);\n  }, [pageInfo]);\n\n  return (\n    <Vocabulary\n     list={currentList}\n      total={total}\n    />\n  );\n}\n\nexport default VocabularyData;\n"]},"metadata":{},"sourceType":"module"}