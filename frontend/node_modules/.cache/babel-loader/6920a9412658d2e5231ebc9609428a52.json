{"ast":null,"code":"import IPA_CONSTANT from \"../constants/ipaConstant\";\nimport ipaApi from \"./../../apis/ipaApi\";\nimport authReducer from \"../reducers/authReducer\";\nexport const getIPA = id => {\n  return async dispatch => {\n    try {\n      const response = await ipaApi.getIPA(id);\n\n      if (response.status === 200) {\n        dispatch({\n          type: IPA_CONSTANT.GET_IPA,\n          payload: response.data\n        });\n      } else {\n        dispatch({\n          type: IPA_CONSTANT.SET_IPA_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: IPA_CONSTANT.SET_IPA_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const getIPARelative = (type, key) => {\n  return async dispatch => {\n    try {\n      const response = await ipaApi.getIPARelative(type, key);\n\n      if (response.status === 200) {\n        dispatch({\n          type: IPA_CONSTANT.GET_IPA_RELATIVE,\n          payload: response.data\n        });\n      } else {\n        dispatch({\n          type: IPA_CONSTANT.SET_IPA_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: IPA_CONSTANT.SET_IPA_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const getIPAByType = type => {\n  return async dispatch => {\n    try {\n      const response = await ipaApi.getIPAByType(type);\n      console.log(response.data);\n\n      if (response.status === 200) {\n        dispatch({\n          type: IPA_CONSTANT.GET_IPA_BY_TYPE,\n          payload: response.data.ipas\n        });\n      } else {\n        dispatch({\n          type: IPA_CONSTANT.SET_IPA_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: IPA_CONSTANT.SET_IPA_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const getAllIPA = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: IPA_CONSTANT.SET_IPA_LOADING,\n        payload: true\n      });\n      const {\n        authReducer: {\n          user\n        }\n      } = getState();\n      const response = await ipaApi.getAllIPA(user.access_token);\n\n      if (response.status === 200) {\n        dispatch({\n          type: IPA_CONSTANT.GET_ALL_IPA,\n          payload: response.data.ipas\n        });\n      } else {\n        dispatch({\n          type: IPA_CONSTANT.SET_IPA_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: IPA_CONSTANT.SET_IPA_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const postIPA = formData => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        authReducer: {\n          user\n        }\n      } = getState();\n      const response = await ipaApi.postIPA(formData, user.access_token);\n\n      if (response.status === 200) {\n        dispatch({\n          type: IPA_CONSTANT.CREATE_IPA,\n          payload: response.data.ipa\n        });\n      } else {\n        dispatch({\n          type: IPA_CONSTANT.SET_IPA_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: IPA_CONSTANT.SET_IPA_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const putIPA = (id, formData) => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await ipaApi.putIPA(id, formData);\n\n      if (response.status === 200) {\n        dispatch({\n          type: IPA_CONSTANT.EDIT_IPA,\n          payload: response.data.ipa\n        });\n      } else {\n        dispatch({\n          type: IPA_CONSTANT.SET_IPA_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: IPA_CONSTANT.SET_IPA_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const deleteIPA = id => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await ipaApi.deleteIPA(id);\n\n      if (response.status === 200) {\n        dispatch({\n          type: IPA_CONSTANT.DELETE_IPA,\n          payload: id\n        });\n      } else {\n        dispatch({\n          type: IPA_CONSTANT.SET_IPA_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: IPA_CONSTANT.SET_IPA_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};","map":{"version":3,"sources":["E:/TLCN/LearningEnglishWebsite/frontend/src/redux/actions/ipaAction.js"],"names":["IPA_CONSTANT","ipaApi","authReducer","getIPA","id","dispatch","response","status","type","GET_IPA","payload","data","SET_IPA_ERROR","message","error","getIPARelative","key","GET_IPA_RELATIVE","getIPAByType","console","log","GET_IPA_BY_TYPE","ipas","getAllIPA","getState","SET_IPA_LOADING","user","access_token","GET_ALL_IPA","postIPA","formData","CREATE_IPA","ipa","putIPA","EDIT_IPA","deleteIPA","DELETE_IPA"],"mappings":"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","sourcesContent":["import IPA_CONSTANT from \"../constants/ipaConstant\";\nimport ipaApi from \"./../../apis/ipaApi\";\nimport authReducer from \"../reducers/authReducer\";\n\n\nexport const getIPA = (id) => {\n    return async (dispatch) => {\n        try { \n          const response = await ipaApi.getIPA(id);\n          if(response.status===200){\n            dispatch({\n              type: IPA_CONSTANT.GET_IPA,\n              payload: response.data,\n            })\n          }\n          else\n          {\n            dispatch({\n              type: IPA_CONSTANT.SET_IPA_ERROR,\n              payload: response.data.message,\n            })\n          }\n        } catch (error) {\n          dispatch({ type: IPA_CONSTANT.SET_IPA_ERROR,\n            payload: error.response.message\n          })\n      }\n    }\n};\n\nexport const getIPARelative = (type, key) => {\n  return async (dispatch) => {\n      try { \n        const response = await ipaApi.getIPARelative(type, key);\n        if(response.status===200){\n          dispatch({\n            type: IPA_CONSTANT.GET_IPA_RELATIVE,\n            payload: response.data,\n          })\n        }\n        else\n        {\n          dispatch({\n            type: IPA_CONSTANT.SET_IPA_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({ type: IPA_CONSTANT.SET_IPA_ERROR,\n          payload: error.response.message\n        })\n    }\n  }\n};\n\nexport const getIPAByType = (type) => {\n  return async (dispatch) => {\n      try { \n       \n        const response = await ipaApi.getIPAByType(type);\n        console.log(response.data)\n        if(response.status===200){\n          dispatch({\n            type: IPA_CONSTANT.GET_IPA_BY_TYPE,\n            payload: response.data.ipas,\n          })\n        }\n        else\n        {\n          dispatch({\n            type: IPA_CONSTANT.SET_IPA_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({ type: IPA_CONSTANT.SET_IPA_ERROR,\n          payload: error.response.message\n        })\n    }\n  }\n};\n\n\nexport const getAllIPA = () => {\n    return async (dispatch, getState) => {\n        try { \n          dispatch({\n            type: IPA_CONSTANT.SET_IPA_LOADING,\n            payload:true,\n          });\n\n          const {\n            authReducer: { user },\n          } = getState();\n\n          const response = await ipaApi.getAllIPA(user.access_token);\n          if(response.status===200){\n            dispatch({\n              type: IPA_CONSTANT.GET_ALL_IPA,\n              payload: response.data.ipas,\n            })\n          }\n          else\n          {\n            dispatch({\n              type: IPA_CONSTANT.SET_IPA_ERROR,\n              payload: response.data.message,\n            })\n          }\n        } catch (error) {\n          dispatch({ type: IPA_CONSTANT.SET_IPA_ERROR,\n             payload: error.response.message\n          })\n      }\n    }\n};\n\nexport const postIPA = (formData) => {\n    return async (dispatch, getState) => {\n        try { \n          const {\n            authReducer: { user },\n          } = getState();\n\n          const response = await ipaApi.postIPA(formData, user.access_token);\n          if(response.status===200){\n            dispatch({\n              type: IPA_CONSTANT.CREATE_IPA,\n              payload: response.data.ipa,\n            })\n          }\n          else\n          {\n            dispatch({\n              type: IPA_CONSTANT.SET_IPA_ERROR,\n              payload: response.data.message,\n            })\n          }\n        } catch (error) {\n          dispatch({ type: IPA_CONSTANT.SET_IPA_ERROR,\n             payload: error.response.message\n          })\n      }\n    }\n};\n\nexport const putIPA = (id, formData) => {\n    return async (dispatch, getState) => {\n        try { \n          const response = await ipaApi.putIPA(id, formData);\n          if(response.status===200){\n            dispatch({\n              type: IPA_CONSTANT.EDIT_IPA,\n              payload: response.data.ipa,\n            })\n          }\n          else\n          {\n            dispatch({\n              type: IPA_CONSTANT.SET_IPA_ERROR,\n              payload: response.data.message,\n            })\n          }\n        } catch (error) {\n          dispatch({ type: IPA_CONSTANT.SET_IPA_ERROR,\n            payload: error.response.message\n          })\n      }\n    }\n};\n\nexport const deleteIPA = (id) => {\n    return async (dispatch, getState) => {\n        try { \n          const response = await ipaApi.deleteIPA(id);\n          if(response.status===200){\n            dispatch({\n              type: IPA_CONSTANT.DELETE_IPA,\n              payload: id,\n            })\n          }\n          else\n          {\n            dispatch({\n              type: IPA_CONSTANT.SET_IPA_ERROR,\n              payload: response.data.message,\n            })\n          }\n        } catch (error) {\n          dispatch({ type: IPA_CONSTANT.SET_IPA_ERROR,\n            payload: error.response.message\n          })\n      }\n    }\n};"]},"metadata":{},"sourceType":"module"}