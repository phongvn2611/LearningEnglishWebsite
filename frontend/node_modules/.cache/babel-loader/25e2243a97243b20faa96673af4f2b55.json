{"ast":null,"code":"var _jsxFileName = \"E:\\\\TLCN\\\\LearningEnglishWebsite\\\\frontend\\\\src\\\\components\\\\UI\\\\TooltipCustom.js\",\n    _s = $RefreshSig$();\n\n// custom MUI tooltip with click event for mobile\nimport Tooltip from '@material-ui/core/Tooltip';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TooltipCustom(props) {\n  _s();\n\n  const [open, setOpen] = useState(false);\n  const [isMd, setIsMd] = useState(-1);\n  const {\n    children,\n    ...rest\n  } = props;\n  useEffect(() => {\n    let isSub = true;\n\n    if (document.body.offsetWidth > 576) {\n      isSub && setIsMd(true);\n    } else {\n      isSub && setIsMd(false);\n    }\n\n    return () => isSub = false;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isMd !== -1 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isMd ?\n      /*#__PURE__*/\n      // mode hover\n      _jsxDEV(Tooltip, { ...rest,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this) :\n      /*#__PURE__*/\n      // mode click\n      _jsxDEV(Tooltip, { ...rest,\n        open: open,\n        onClick: () => setOpen(!open),\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n}\n\n_s(TooltipCustom, \"sCzQKRR7P7mBpCPGgu0/fnE7whE=\");\n\n_c = TooltipCustom;\nTooltipCustom.propTypes = {\n  children: PropTypes.any\n};\nexport default TooltipCustom;\n\nvar _c;\n\n$RefreshReg$(_c, \"TooltipCustom\");","map":{"version":3,"sources":["E:/TLCN/LearningEnglishWebsite/frontend/src/components/UI/TooltipCustom.js"],"names":["Tooltip","PropTypes","React","useEffect","useState","TooltipCustom","props","open","setOpen","isMd","setIsMd","children","rest","isSub","document","body","offsetWidth","propTypes","any"],"mappings":";;;AAAA;AACA,OAAOA,OAAP,MAAoB,2BAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,CAAC,CAAF,CAAhC;AACA,QAAM;AAAEO,IAAAA,QAAF;AAAY,OAAGC;AAAf,MAAwBN,KAA9B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,KAAK,GAAG,IAAZ;;AAEA,QAAIC,QAAQ,CAACC,IAAT,CAAcC,WAAd,GAA4B,GAAhC,EAAqC;AACnCH,MAAAA,KAAK,IAAIH,OAAO,CAAC,IAAD,CAAhB;AACD,KAFD,MAEO;AACLG,MAAAA,KAAK,IAAIH,OAAO,CAAC,KAAD,CAAhB;AACD;;AAED,WAAO,MAAOG,KAAK,GAAG,KAAtB;AACD,GAVQ,EAUN,EAVM,CAAT;AAYA,sBACE;AAAA,cACGJ,IAAI,KAAK,CAAC,CAAV,iBACC;AAAA,gBACGA,IAAI;AAAA;AACH;AACA,cAAC,OAAD,OAAaG,IAAb;AAAA,kBAAoBD;AAApB;AAAA;AAAA;AAAA;AAAA,cAFG;AAAA;AAIH;AACA,cAAC,OAAD,OAAaC,IAAb;AAAmB,QAAA,IAAI,EAAEL,IAAzB;AAA+B,QAAA,OAAO,EAAE,MAAMC,OAAO,CAAC,CAACD,IAAF,CAArD;AAAA,kBACGI;AADH;AAAA;AAAA;AAAA;AAAA;AANJ;AAFJ,mBADF;AAiBD;;GAlCQN,a;;KAAAA,a;AAoCTA,aAAa,CAACY,SAAd,GAA0B;AACxBN,EAAAA,QAAQ,EAAEV,SAAS,CAACiB;AADI,CAA1B;AAIA,eAAeb,aAAf","sourcesContent":["// custom MUI tooltip with click event for mobile\nimport Tooltip from '@material-ui/core/Tooltip';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\n\nfunction TooltipCustom(props) {\n  const [open, setOpen] = useState(false);\n  const [isMd, setIsMd] = useState(-1);\n  const { children, ...rest } = props;\n\n  useEffect(() => {\n    let isSub = true;\n\n    if (document.body.offsetWidth > 576) {\n      isSub && setIsMd(true);\n    } else {\n      isSub && setIsMd(false);\n    }\n\n    return () => (isSub = false);\n  }, []);\n\n  return (\n    <>\n      {isMd !== -1 && (\n        <>\n          {isMd ? (\n            // mode hover\n            <Tooltip {...rest}>{children}</Tooltip>\n          ) : (\n            // mode click\n            <Tooltip {...rest} open={open} onClick={() => setOpen(!open)}>\n              {children}\n            </Tooltip>\n          )}\n        </>\n      )}\n    </>\n  );\n}\n\nTooltipCustom.propTypes = {\n  children: PropTypes.any,\n};\n\nexport default TooltipCustom;\n"]},"metadata":{},"sourceType":"module"}