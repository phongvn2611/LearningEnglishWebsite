{"ast":null,"code":"var _jsxFileName = \"E:\\\\TLCN\\\\LearningEnglishWebsite\\\\frontend\\\\src\\\\components\\\\WordAdmin\\\\AddWord\\\\data.js\",\n    _s = $RefreshSig$();\n\nimport wordApi from \"apis/wordApi\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"; // import { messageReducer } from '/src/redux/reducers/messageReducer';\n\nimport WordContribution from \"./index\";\nimport { setMessage } from \"redux/actions/messageAction\"; //import messageReducer from 'redux/reducers/messageReducer';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst analysisExample = (exampleStr = \"\", word = \"\") => {\n  if (typeof exampleStr !== \"string\" || exampleStr === \"\") {\n    return [];\n  }\n\n  const exampleArr = exampleStr.split(\"\\n\");\n\n  for (let str of exampleArr) {\n    if (str.toLocaleLowerCase().indexOf(word.toLocaleLowerCase()) === -1) {\n      return false;\n    }\n  }\n\n  return exampleArr;\n};\n\nfunction WordContributionData() {\n  _s();\n\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async data => {\n    try {\n      setSubmitting(true);\n      const {\n        examples,\n        synonyms,\n        antonyms,\n        word,\n        phonetic,\n        ...rest\n      } = data; // check examples validation\n\n      const exampleArr = analysisExample(examples, word);\n\n      if (typeof exampleArr === \"boolean\" && !exampleArr) {\n        dispatch(setMessage(\"Câu ví dụ phải chứa từ vựng mới.\", \"warning\"));\n        setSubmitting(false);\n        return;\n      } // split synonyms string to an array synonyms\n\n\n      const synonymArr = synonyms !== \"\" ? synonyms.split(\"\\n\") : []; // split antonyms string to an array synonyms\n\n      const antonymArr = antonyms !== \"\" ? antonyms.split(\"\\n\") : []; // call API\n\n      const dataSend = { ...rest,\n        examples: exampleArr,\n        synonyms: synonymArr,\n        antonyms: antonymArr,\n        word,\n        phonetic: phonetic.replaceAll(\"/\", \"\")\n      };\n      const apiRes = await wordApi.postWord(dataSend);\n\n      if (apiRes) {\n        dispatch(setMessage(\"Created word successfully\", \"success\"));\n        setSubmitting(false);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Error, can not create word\";\n      dispatch(setMessage(message, \"error\"));\n      setSubmitting(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(WordContribution, {\n    onSubmitForm: handleSubmit,\n    submitting: submitting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WordContributionData, \"5iB+qujXnQj6jBoSGKljUlKKZP8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = WordContributionData;\nexport default WordContributionData;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordContributionData\");","map":{"version":3,"sources":["E:/TLCN/LearningEnglishWebsite/frontend/src/components/WordAdmin/AddWord/data.js"],"names":["wordApi","React","useState","useEffect","useDispatch","useSelector","WordContribution","setMessage","analysisExample","exampleStr","word","exampleArr","split","str","toLocaleLowerCase","indexOf","WordContributionData","submitting","setSubmitting","dispatch","handleSubmit","data","examples","synonyms","antonyms","phonetic","rest","synonymArr","antonymArr","dataSend","replaceAll","apiRes","postWord","error","message","response"],"mappings":"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","sourcesContent":["import wordApi from \"apis/wordApi\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// import { messageReducer } from '/src/redux/reducers/messageReducer';\nimport WordContribution from \"./index\";\nimport { setMessage } from \"redux/actions/messageAction\";\n//import messageReducer from 'redux/reducers/messageReducer';\n\nconst analysisExample = (exampleStr = \"\", word = \"\") => {\n  if (typeof exampleStr !== \"string\" || exampleStr === \"\") {\n    return [];\n  }\n\n  const exampleArr = exampleStr.split(\"\\n\");\n  for (let str of exampleArr) {\n    if (str.toLocaleLowerCase().indexOf(word.toLocaleLowerCase()) === -1) {\n      return false;\n    }\n  }\n\n  return exampleArr;\n};\n\nfunction WordContributionData() {\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (data) => {\n    try {\n      setSubmitting(true);\n      const { examples, synonyms, antonyms, word, phonetic, ...rest } = data;\n\n      // check examples validation\n      const exampleArr = analysisExample(examples, word);\n      if (typeof exampleArr === \"boolean\" && !exampleArr) {\n        dispatch(setMessage(\"Câu ví dụ phải chứa từ vựng mới.\", \"warning\"));\n        setSubmitting(false);\n        return;\n      }\n\n      // split synonyms string to an array synonyms\n      const synonymArr = synonyms !== \"\" ? synonyms.split(\"\\n\") : [];\n\n      // split antonyms string to an array synonyms\n      const antonymArr = antonyms !== \"\" ? antonyms.split(\"\\n\") : [];\n\n      // call API\n      const dataSend = {\n        ...rest,\n        examples: exampleArr,\n        synonyms: synonymArr,\n        antonyms: antonymArr,\n        word,\n        phonetic: phonetic.replaceAll(\"/\", \"\"),\n      };\n      const apiRes = await wordApi.postWord(dataSend);\n      if (apiRes) {\n        dispatch(setMessage(\"Created word successfully\", \"success\"));\n        setSubmitting(false);\n      }\n    } catch (error) {\n      const message =\n        error.response?.data?.message || \"Error, can not create word\";\n      dispatch(setMessage(message, \"error\"));\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <WordContribution onSubmitForm={handleSubmit} submitting={submitting} />\n  );\n}\n\nexport default WordContributionData;\n"]},"metadata":{},"sourceType":"module"}