{"ast":null,"code":"var _jsxFileName = \"E:\\\\TLCN\\\\LearningEnglishWebsite\\\\frontend\\\\src\\\\pages\\\\Logout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport GlobalLoading from '../components/UI/GlobalLoading';\nimport { setMessage } from './../redux/actions/messageAction';\nimport userApi from './../apis/userApi';\nimport { logout } from './../redux/actions/authAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction LogoutPage() {\n  _s();\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const {\n    isAuth\n  } = useSelector(state => state.authReducer);\n  useEffect(() => {\n    (async function () {\n      try {\n        const apiRes = await userApi.logout();\n\n        if (apiRes) {\n          dispatch(logout(apiRes));\n          dispatch(setMessage(apiRes.data.message, 'success'));\n          history.replace('/home');\n        }\n      } catch (error) {\n        dispatch(setMessage(error.response.data.message, 'error'));\n      }\n    })();\n\n    return () => {};\n  }, [dispatch, history, isAuth]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isAuth && /*#__PURE__*/_jsxDEV(GlobalLoading, {\n      title: \"Logging out ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 23\n    }, this)\n  }, void 0, false);\n}\n\n_s(LogoutPage, \"f1Nt+O0I14AL1DrbW+y+w9ZCsME=\", false, function () {\n  return [useHistory, useDispatch, useSelector];\n});\n\n_c = LogoutPage;\nexport default LogoutPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogoutPage\");","map":{"version":3,"sources":["E:/TLCN/LearningEnglishWebsite/frontend/src/pages/Logout.js"],"names":["React","useEffect","useDispatch","useSelector","useHistory","GlobalLoading","setMessage","userApi","logout","LogoutPage","history","dispatch","isAuth","state","authReducer","apiRes","data","message","replace","error","response"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,SAASC,UAAT,QAA2B,kCAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,MAAT,QAAuB,+BAAvB;;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAMC,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAMO,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAaT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACC,WAAlB,CAA9B;AAEAb,EAAAA,SAAS,CAAC,MAAM;AAEd,KAAC,kBAAkB;AACjB,UAAI;AACF,cAAMc,MAAM,GAAG,MAAMR,OAAO,CAACC,MAAR,EAArB;;AACA,YAAIO,MAAJ,EAAY;AACVJ,UAAAA,QAAQ,CAACH,MAAM,CAACO,MAAD,CAAP,CAAR;AACAJ,UAAAA,QAAQ,CAACL,UAAU,CAACS,MAAM,CAACC,IAAP,CAAYC,OAAb,EAAsB,SAAtB,CAAX,CAAR;AACAP,UAAAA,OAAO,CAACQ,OAAR,CAAgB,OAAhB;AACD;AACF,OAPD,CAOE,OAAOC,KAAP,EAAc;AACdR,QAAAA,QAAQ,CAACL,UAAU,CAACa,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBC,OAArB,EAA8B,OAA9B,CAAX,CAAR;AACD;AACF,KAXD;;AAaA,WAAO,MAAM,CAAE,CAAf;AACD,GAhBQ,EAgBN,CAACN,QAAD,EAAWD,OAAX,EAAoBE,MAApB,CAhBM,CAAT;AAkBA,sBAAO;AAAA,cAAGA,MAAM,iBAAI,QAAC,aAAD;AAAe,MAAA,KAAK,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA;AAAb,mBAAP;AACD;;GAxBQH,U;UACSL,U,EACCF,W,EACEC,W;;;KAHZM,U;AA0BT,eAAeA,UAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport GlobalLoading from '../components/UI/GlobalLoading';\nimport { setMessage } from './../redux/actions/messageAction';\nimport userApi from './../apis/userApi';\nimport { logout } from './../redux/actions/authAction';\n\nfunction LogoutPage() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { isAuth } = useSelector((state) => state.authReducer);\n\n  useEffect(() => {\n\n    (async function () {\n      try {\n        const apiRes = await userApi.logout();\n        if (apiRes) {\n          dispatch(logout(apiRes));\n          dispatch(setMessage(apiRes.data.message, 'success'))\n          history.replace('/home');\n        }\n      } catch (error) {\n        dispatch(setMessage(error.response.data.message, 'error'));\n      }\n    })();\n\n    return () => {};\n  }, [dispatch, history, isAuth]);\n\n  return <>{isAuth && <GlobalLoading title=\"Logging out ...\" />}</>;\n}\n\nexport default LogoutPage;\n"]},"metadata":{},"sourceType":"module"}