{"ast":null,"code":"var _jsxFileName = \"E:\\\\TLCN\\\\LearningEnglishWebsite\\\\frontend\\\\src\\\\components\\\\WordAdmin\\\\AddWord\\\\PhoneticInput.js\",\n    _s = $RefreshSig$();\n\nimport Grid from '@material-ui/core/Grid';\nimport InputCustom from 'components/UI/InputCustom';\nimport PhoneticKeyboard from 'components/UI/PhoneticKeyboard';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport InformationTooltip from './InformationTooltip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PhoneticInput(props) {\n  _s();\n\n  const {\n    value,\n    errorMessage,\n    error,\n    register,\n    resetFlag,\n    onChange,\n    ...restProps\n  } = props;\n  const {\n    inputProps\n  } = restProps;\n  const {\n    ref,\n    ...rest\n  } = register;\n  const inputRef = useRef(null);\n  const [openKeyboard, setOpenKeyboard] = useState(false);\n  const [phonetic, setPhonetic] = useState(value);\n\n  const onCloseKeyboard = () => setOpenKeyboard(false);\n\n  const onInput = c => {\n    setPhonetic(phonetic + c);\n    inputRef.current.focus();\n  };\n\n  useEffect(() => {\n    if (!resetFlag) return; // reset value if parent component reset, except first render\n\n    setPhonetic('');\n  }, [resetFlag]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 6,\n      lg: 4,\n      children: [/*#__PURE__*/_jsxDEV(InputCustom, {\n        onClick: () => setOpenKeyboard(true),\n        className: \"w-100\",\n        label: \"K\\xFD \\xE2m (*)\",\n        error: error,\n        value: phonetic,\n        inputProps: { ...inputProps,\n          ...rest,\n          ref: e => {\n            ref(e);\n            inputRef.current = e;\n          }\n        },\n        onChange: e => {\n          setPhonetic(e.target.value);\n          onChange(e);\n        },\n        endAdornment: /*#__PURE__*/_jsxDEV(InformationTooltip, {\n          title: \"Nh\\u1EADp k\\xFD \\xE2m (ng\\u1EEF \\xE2m) c\\u1EE7a t\\u1EEB m\\u1EDBi. V\\xED d\\u1EE5: f\\u0259\\u02C8net\\u026Ak\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-error\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), openKeyboard && /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(PhoneticKeyboard, {\n        onInput: onInput,\n        onClose: onCloseKeyboard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PhoneticInput, \"dmTBrImBqO/NhsJe4l59xWiUJIg=\");\n\n_c = PhoneticInput;\nPhoneticInput.propTypes = {\n  error: PropTypes.bool,\n  errorMessage: PropTypes.string,\n  register: PropTypes.any,\n  resetFlag: PropTypes.number,\n  valueInput: PropTypes.string,\n  onChange: PropTypes.func\n};\nPhoneticInput.defaultProps = {\n  error: false,\n  errorMessage: null,\n  resetFlag: 0,\n  valueInput: '',\n  onChange: function () {}\n};\nexport default PhoneticInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhoneticInput\");","map":{"version":3,"sources":["E:/TLCN/LearningEnglishWebsite/frontend/src/components/WordAdmin/AddWord/PhoneticInput.js"],"names":["Grid","InputCustom","PhoneticKeyboard","PropTypes","React","useEffect","useRef","useState","InformationTooltip","PhoneticInput","props","value","errorMessage","error","register","resetFlag","onChange","restProps","inputProps","ref","rest","inputRef","openKeyboard","setOpenKeyboard","phonetic","setPhonetic","onCloseKeyboard","onInput","c","current","focus","e","target","propTypes","bool","string","any","number","valueInput","func","defaultProps"],"mappings":"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","sourcesContent":["import Grid from '@material-ui/core/Grid';\nimport InputCustom from 'components/UI/InputCustom';\nimport PhoneticKeyboard from 'components/UI/PhoneticKeyboard';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport InformationTooltip from './InformationTooltip';\n\nfunction PhoneticInput(props) {\n  const { value, errorMessage, error, register, resetFlag, onChange,...restProps } = props;\n  const { inputProps } = restProps;\n  const { ref, ...rest } = register;\n  const inputRef = useRef(null);\n\n  const [openKeyboard, setOpenKeyboard] = useState(false);\n  const [phonetic, setPhonetic] = useState(value);\n\n  const onCloseKeyboard = () => setOpenKeyboard(false);\n\n  const onInput = (c) => {\n    setPhonetic(phonetic + c);\n    inputRef.current.focus();\n  };\n\n  useEffect(() => {\n    if (!resetFlag) return;\n    // reset value if parent component reset, except first render\n    setPhonetic('');\n  }, [resetFlag]);\n\n  return (\n    <>\n      <Grid item xs={12} md={6} lg={4}>\n        <InputCustom\n          onClick={() => setOpenKeyboard(true)}\n          className=\"w-100\"\n          label=\"Ký âm (*)\"\n          error={error}\n          value={phonetic}\n          inputProps={{\n            ...inputProps,\n            ...rest,\n            ref: (e) => {\n              ref(e);\n              inputRef.current = e;\n            },\n          }}\n          onChange={(e) => {\n            setPhonetic(e.target.value);\n            onChange(e);\n          }}\n          endAdornment={\n            <InformationTooltip title=\"Nhập ký âm (ngữ âm) của từ mới. Ví dụ: fəˈnetɪk\" />\n          }\n        />\n        {errorMessage && <p className=\"text-error\">{errorMessage}</p>}\n      </Grid>\n\n      {openKeyboard && (\n        <Grid item xs={12}>\n          <PhoneticKeyboard onInput={onInput} onClose={onCloseKeyboard} />\n        </Grid>\n      )}\n    </>\n  );\n}\n\nPhoneticInput.propTypes = {\n  error: PropTypes.bool,\n  errorMessage: PropTypes.string,\n  register: PropTypes.any,\n  resetFlag: PropTypes.number,\n  valueInput: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nPhoneticInput.defaultProps = {\n  error: false,\n  errorMessage: null,\n  resetFlag: 0,\n  valueInput:'',\n  onChange: function () {},\n};\n\nexport default PhoneticInput;\n"]},"metadata":{},"sourceType":"module"}