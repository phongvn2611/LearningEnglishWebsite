{"ast":null,"code":"var _jsxFileName = \"E:\\\\TLCN\\\\LearningEnglishWebsite\\\\frontend\\\\src\\\\components\\\\ListeningAdmin\\\\CreateListen\\\\data.js\",\n    _s = $RefreshSig$();\n\nimport listeningApi from 'apis/listeningApi';\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // import { messageReducer } from '/src/redux/reducers/messageReducer';\n\nimport CreateListening from './index';\nimport { setMessage } from 'redux/actions/messageAction'; //import messageReducer from 'redux/reducers/messageReducer';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst analysisLinkVideo = (linkVideo = '') => {\n  if (typeof linkVideo !== 'string' || linkVideo === '') {\n    return null;\n  }\n\n  let checkVid = linkVideo.includes(\"https://www.youtube.com\");\n\n  if (!checkVid) {\n    checkVid = linkVideo.includes(\"youtu.be/\");\n\n    if (checkVid) {\n      return linkVideo;\n    }\n\n    return null;\n  }\n\n  return linkVideo;\n};\n\nfunction CreateListeningData() {\n  _s();\n\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async data => {\n    try {\n      setSubmitting(true);\n      const {\n        VidUpload,\n        LinkVideo,\n        ...rest\n      } = data;\n      let dataSend = [];\n      console.log(data);\n\n      if (VidUpload == null) {\n        //  console.log(data)\n        const videoUrl = analysisLinkVideo(LinkVideo);\n\n        if (videoUrl == null) {\n          dispatch(setMessage(\"Link video is invalid.\", \"warning\"));\n          setSubmitting(false);\n          return;\n        }\n\n        dataSend = { ...rest,\n          Video: videoUrl\n        };\n      } else {\n        dataSend = { ...rest,\n          Video: VidUpload\n        };\n      }\n\n      const apiRes = await listeningApi.postListen(dataSend);\n      console.log(apiRes.data);\n\n      if (apiRes.status === 200) {\n        dispatch(setMessage(\"Created listening successfully\", \"success\"));\n        setSubmitting(false);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error, can not create listening.';\n      dispatch(setMessage(message, \"error\"));\n      setSubmitting(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CreateListening, {\n    onSubmitForm: handleSubmit,\n    submitting: submitting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateListeningData, \"5iB+qujXnQj6jBoSGKljUlKKZP8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = CreateListeningData;\nexport default CreateListeningData;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateListeningData\");","map":{"version":3,"sources":["E:/TLCN/LearningEnglishWebsite/frontend/src/components/ListeningAdmin/CreateListen/data.js"],"names":["listeningApi","React","useState","useEffect","useDispatch","useSelector","CreateListening","setMessage","analysisLinkVideo","linkVideo","checkVid","includes","CreateListeningData","submitting","setSubmitting","dispatch","handleSubmit","data","VidUpload","LinkVideo","rest","dataSend","console","log","videoUrl","Video","apiRes","postListen","status","error","message","response"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA4C,OAA5C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;;AACA,OAAOC,eAAP,MAA4B,SAA5B;AACA,SAASC,UAAT,QAA2B,6BAA3B,C,CACA;;;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,SAAS,GAAG,EAAb,KAAoB;AAC5C,MAAI,OAAOA,SAAP,KAAqB,QAArB,IAAiCA,SAAS,KAAK,EAAnD,EAAuD;AACrD,WAAO,IAAP;AACD;;AAED,MAAIC,QAAQ,GAAGD,SAAS,CAACE,QAAV,CAAmB,yBAAnB,CAAf;;AACA,MAAG,CAACD,QAAJ,EAAa;AACTA,IAAAA,QAAQ,GAAED,SAAS,CAACE,QAAV,CAAmB,WAAnB,CAAV;;AACA,QAAGD,QAAH,EACA;AACE,aAAOD,SAAP;AACD;;AACD,WAAO,IAAP;AACH;;AACD,SAAOA,SAAP;AACD,CAfD;;AAkBA,SAASG,mBAAT,GAA+B;AAAA;;AAC7B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMa,QAAQ,GAAGX,WAAW,EAA5B;;AAGA,QAAMY,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACnC,QAAI;AACFH,MAAAA,aAAa,CAAC,IAAD,CAAb;AACA,YAAM;AAAEI,QAAAA,SAAF;AAAaC,QAAAA,SAAb;AAAwB,WAAGC;AAA3B,UAAoCH,IAA1C;AACA,UAAII,QAAQ,GAAG,EAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;;AACA,UAAGC,SAAS,IAAI,IAAhB,EAAqB;AACrB;AACE,cAAMM,QAAQ,GAAGhB,iBAAiB,CAACW,SAAD,CAAlC;;AACA,YAAIK,QAAQ,IAAE,IAAd,EAAoB;AAClBT,UAAAA,QAAQ,CAACR,UAAU,CAAC,wBAAD,EAA2B,SAA3B,CAAX,CAAR;AACAO,UAAAA,aAAa,CAAC,KAAD,CAAb;AACA;AACD;;AACDO,QAAAA,QAAQ,GAAE,EACR,GAAGD,IADK;AAETK,UAAAA,KAAK,EAAED;AAFE,SAAV;AAID,OAZD,MAaI;AACFH,QAAAA,QAAQ,GAAE,EACR,GAAGD,IADK;AAETK,UAAAA,KAAK,EAAEP;AAFE,SAAV;AAID;;AACD,YAAMQ,MAAM,GAAG,MAAM1B,YAAY,CAAC2B,UAAb,CAAwBN,QAAxB,CAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYG,MAAM,CAACT,IAAnB;;AACA,UAAIS,MAAM,CAACE,MAAP,KAAkB,GAAtB,EAA2B;AACzBb,QAAAA,QAAQ,CAACR,UAAU,CAAC,gCAAD,EAAmC,SAAnC,CAAX,CAAR;AACAO,QAAAA,aAAa,CAAC,KAAD,CAAb;AACF;AAED,KA/BD,CA+BE,OAAOe,KAAP,EAAc;AAAA;;AACd,YAAMC,OAAO,GAAI,oBAAAD,KAAK,CAACE,QAAN,4FAAgBd,IAAhB,8EAAsBa,OAAtB,KACjB,kCADA;AAEEf,MAAAA,QAAQ,CAACR,UAAU,CAACuB,OAAD,EAAU,OAAV,CAAX,CAAR;AACFhB,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GAtCD;;AAwCA,sBACE,QAAC,eAAD;AAAiB,IAAA,YAAY,EAAEE,YAA/B;AAA6C,IAAA,UAAU,EAAEH;AAAzD;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GAhDQD,mB;UAEUR,W;;;KAFVQ,mB;AAkDT,eAAeA,mBAAf","sourcesContent":["import listeningApi from 'apis/listeningApi';\nimport React, { useState, useEffect  } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { messageReducer } from '/src/redux/reducers/messageReducer';\nimport CreateListening from './index';\nimport { setMessage } from 'redux/actions/messageAction';\n//import messageReducer from 'redux/reducers/messageReducer';\n\nconst analysisLinkVideo = (linkVideo = '') => {\n  if (typeof linkVideo !== 'string' || linkVideo === '') {\n    return null;\n  }\n\n  let checkVid = linkVideo.includes(\"https://www.youtube.com\")\n  if(!checkVid){\n      checkVid =linkVideo.includes(\"youtu.be/\")\n      if(checkVid)\n      {\n        return linkVideo;\n      }\n      return null;\n  }\n  return linkVideo;\n};\n\n\nfunction CreateListeningData() {\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n\n\n  const handleSubmit = async (data) => {\n    try {\n      setSubmitting(true);\n      const { VidUpload, LinkVideo, ...rest } = data;\n      let dataSend = []\n      console.log(data);\n      if(VidUpload == null){\n      //  console.log(data)\n        const videoUrl = analysisLinkVideo(LinkVideo);\n        if (videoUrl==null) {\n          dispatch(setMessage(\"Link video is invalid.\", \"warning\"));\n          setSubmitting(false);\n          return;\n        }\n        dataSend ={\n          ...rest,\n         Video: videoUrl,\n        };\n      }\n      else{\n        dataSend ={\n          ...rest,\n         Video: VidUpload,\n        };  \n      }     \n      const apiRes = await listeningApi.postListen(dataSend);\n      console.log(apiRes.data)\n      if (apiRes.status === 200) {\n        dispatch(setMessage(\"Created listening successfully\", \"success\"));\n        setSubmitting(false);\n     }\n\n    } catch (error) {\n      const message =  error.response?.data?.message ||\n      'Error, can not create listening.';\n        dispatch(setMessage(message, \"error\"));\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <CreateListening onSubmitForm={handleSubmit} submitting={submitting} />\n  );\n}\n\nexport default CreateListeningData;\n"]},"metadata":{},"sourceType":"module"}