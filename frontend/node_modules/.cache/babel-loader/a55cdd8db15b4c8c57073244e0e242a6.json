{"ast":null,"code":"import GRAMMAR_CONSTANT from \"../constants/grammarConstant\";\nimport grammarApi from \"./../../apis/grammarApi\";\nexport const getGrammar = id => {\n  return async dispatch => {\n    try {\n      const response = await grammarApi.getGrammar(id);\n\n      if (response.status === 200) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.GET_GRAMMAR,\n          payload: response.data\n        });\n      } else {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const getAllGrammar = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_LOADING,\n        payload: true\n      });\n      const {\n        authReducer: {\n          user\n        }\n      } = getState();\n      const response = await grammarApi.getAllGrammar(user.access_token);\n\n      if (response.status === 200) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.GET_ALL_GRAMMAR,\n          payload: response.data.grammars\n        });\n      } else {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const getGrammarByLevel = level => {\n  return async dispatch => {\n    try {\n      const response = await grammarApi.getGrammarByLevel(level);\n\n      if (response.status === 200) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.GET_GRAMMAR_BY_LEVEL,\n          payload: response.data.grammars\n        });\n      } else {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const getGrammarLevels = () => {\n  return async dispatch => {\n    try {\n      const response = await grammarApi.getGrammarLevels();\n\n      if (response.status === 200) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.GET_GRAMMAR_LEVELS,\n          payload: response.data.levels\n        });\n      } else {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const postGrammar = formData => {\n  return async dispatch => {\n    try {\n      const response = await grammarApi.postGrammar(formData);\n\n      if (response.status === 200) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.CREATE_GRAMMAR,\n          payload: response.data.grammar\n        });\n      } else {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const putGrammar = (id, formData) => {\n  return async dispatch => {\n    try {\n      const response = await grammarApi.putGrammar(id, formData);\n\n      if (response.status === 200) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.EDIT_GRAMMAR,\n          payload: response.data.grammar\n        });\n      } else {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const deleteGrammar = id => {\n  return async dispatch => {\n    try {\n      const response = await grammarApi.deleteGrammar(id);\n\n      if (response.status === 200) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.DELETE_GRAMMAR,\n          payload: id\n        });\n      } else {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};","map":{"version":3,"sources":["E:/TLCN/LearningEnglishWebsite/frontend/src/redux/actions/grammarAction.js"],"names":["GRAMMAR_CONSTANT","grammarApi","getGrammar","id","dispatch","response","status","type","GET_GRAMMAR","payload","data","SET_GRAMMAR_ERROR","message","error","getAllGrammar","getState","SET_GRAMMAR_LOADING","authReducer","user","access_token","GET_ALL_GRAMMAR","grammars","getGrammarByLevel","level","GET_GRAMMAR_BY_LEVEL","getGrammarLevels","GET_GRAMMAR_LEVELS","levels","postGrammar","formData","CREATE_GRAMMAR","grammar","putGrammar","EDIT_GRAMMAR","deleteGrammar","DELETE_GRAMMAR"],"mappings":"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","sourcesContent":["import GRAMMAR_CONSTANT from \"../constants/grammarConstant\";\nimport grammarApi from \"./../../apis/grammarApi\";\n\n\nexport const getGrammar = (id) => {\n    return async (dispatch) => {\n        try { \n          const response = await grammarApi.getGrammar(id);\n          if(response.status===200){\n            dispatch({\n              type: GRAMMAR_CONSTANT.GET_GRAMMAR,\n              payload: response.data,\n            })\n          }\n          else\n          {\n            dispatch({\n              type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n              payload: response.data.message,\n            })\n          }\n        } catch (error) {\n          dispatch({\n            type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n            payload: error.response.message,\n          })\n        }\n      }\n};\n\nexport const getAllGrammar = () => {\n  return async (dispatch, getState) => {\n      try { \n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_LOADING,\n          payload:true,\n        });\n\n        const {\n          authReducer: { user },\n        } = getState();\n\n        const response = await grammarApi.getAllGrammar(user.access_token);\n        if(response.status===200){\n          dispatch({\n            type: GRAMMAR_CONSTANT.GET_ALL_GRAMMAR,\n            payload: response.data.grammars,\n          })\n        }\n        else\n        {\n          dispatch({\n            type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const getGrammarByLevel = (level) => {\n  return async (dispatch) => {\n      try { \n        const response = await grammarApi.getGrammarByLevel(level);\n        if(response.status===200){\n          dispatch({\n            type: GRAMMAR_CONSTANT.GET_GRAMMAR_BY_LEVEL,\n            payload: response.data.grammars,\n          })\n        }\n        else\n        {\n          dispatch({\n            type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const getGrammarLevels = () => {\n  return async (dispatch) => {\n      try { \n        const response = await grammarApi.getGrammarLevels();\n        if(response.status===200){\n          dispatch({\n            type: GRAMMAR_CONSTANT.GET_GRAMMAR_LEVELS,\n            payload: response.data.levels,\n          })\n        }\n        else\n        {\n          dispatch({\n            type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const postGrammar = (formData) => {\n  return async (dispatch) => {\n      try { \n        const response = await grammarApi.postGrammar(formData);\n        if(response.status===200){\n          dispatch({\n            type: GRAMMAR_CONSTANT.CREATE_GRAMMAR,\n            payload: response.data.grammar,\n          })\n        }\n        else\n        {\n          dispatch({\n            type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const putGrammar = (id, formData) => {\n  return async (dispatch)=>{\n    try{\n        const response = await grammarApi.putGrammar(id, formData);\n        if(response.status===200){\n          dispatch({\n            type: GRAMMAR_CONSTANT.EDIT_GRAMMAR,\n            payload: response.data.grammar,\n          })\n        }\n        else\n        {\n          dispatch({\n            type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const deleteGrammar = (id) => {\n  return async (dispatch) => {\n      try { \n        const response = await grammarApi.deleteGrammar(id);\n        if(response.status===200){\n          dispatch({\n            type: GRAMMAR_CONSTANT.DELETE_GRAMMAR,\n            payload: id,\n          })\n        }\n        else\n        {\n          dispatch({\n            type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: error.response.message,\n        })\n      }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}