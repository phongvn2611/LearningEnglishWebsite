{"version":3,"sources":["components/WordAdmin/AddWord/index.js","components/WordAdmin/AddWord/data.js","pages/AddWord.js"],"names":["schema","yup","shape","word","trim","required","lowercase","max","MAX","WORD_LEN","mean","MEAN_WORD_LEN","phonetic","PHONETIC_LEN","type","oneOf","WORD_TYPES","map","i","value","level","WORD_LEVELS","specialty","WORD_SPECIALTY","examples","EXAMPLE_WORD_LEN","synonyms","SYNONYMS_WORD_LEN","antonyms","note","NOTE_WORD_LEN","ButtonWrapper","props","Grid","item","xs","md","lg","TagsWrapper","WordContribution","onSubmitForm","submitting","useTitle","classes","useStyle","dispatch","useDispatch","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","topics","useRef","history","useHistory","defaultImg","useState","image","setImage","className","title","onSubmit","data","current","picture","autoComplete","container","alignContent","avtWrap","src","alt","avt","cameraIconWrap","cameraIcon","fileInput","onChange","e","preventDefault","file","target","files","setMessage","size","reader","FileReader","readAsDataURL","Promise","resolve","onloadend","result","convertImageToBase64","then","res","err","accept","grid","spacing","InputCustom","label","error","Boolean","inputProps","autoFocus","maxLength","name","message","PhoneticInput","errorMessage","valuePhonetic","SelectCustom","options","index","multiline","endAdornment","InformationTooltip","TopicSelect","topicList","buttonTitle","buttonWrapper","tagsWrapper","Button","btn","btnReset","color","endIcon","variant","onClick","push","disabled","defaultProps","analysisExample","exampleStr","exampleArr","split","str","toLocaleLowerCase","indexOf","WordContributionData","setSubmitting","a","rest","synonymArr","antonymArr","dataSend","replaceAll","wordApi","postWord","response","makeStyles","root","margin","AddWordPage"],"mappings":"gZA6BMA,EAASC,MAAaC,MAAM,CAChCC,KAAMF,MAEHG,OACAC,SAAS,wDACTC,YACAC,IAAIC,IAAIC,SALL,6CAKgCD,IAAIC,SALpC,mBAMNC,KAAMT,MAEHG,OACAE,YACAD,SAAS,4CACTE,IAAIC,IAAIG,cALL,6CAKqCH,IAAIG,cALzC,mBAMNC,SAAUX,MAEPG,OACAE,YACAD,SAAS,iDACTE,IAAIC,IAAIK,aALD,6CAKgCL,IAAIK,aALpC,mBAMVC,KAAMb,MAEHI,SAAS,wCACTU,MAAMC,IAAWC,KAAI,SAACC,GAAD,OAAOA,EAAEC,UACjCC,MAAOnB,MAEJI,SAAS,gDACTU,MAAMM,IAAYJ,KAAI,SAACC,GAAD,OAAOA,EAAEC,UAClCG,UAAWrB,MAERI,SAAS,gDACTU,MAAMQ,IAAeN,KAAI,SAACC,GAAD,OAAOA,EAAEC,UACrCK,SAAUvB,MAEPM,IAAIC,IAAIiB,iBAFD,yCAEmCjB,IAAIiB,iBAFvC,mBAGVC,SAAUzB,MAEPM,IACCC,IAAImB,kBAHE,6DAIkBnB,IAAImB,kBAJtB,mBAMVC,SAAU3B,MAEPM,IACCC,IAAImB,kBAHE,sDAIkBnB,IAAImB,kBAJtB,mBAMVE,KAAM5B,MAEHM,IAAIC,IAAIsB,cAFL,sCAEsCtB,IAAIsB,cAF1C,qBAMFC,EAAgB,SAACC,GAAD,OAAW,cAACC,EAAA,EAAD,2BAAUD,GAAV,IAAiBE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,MACpEC,EAAc,SAACN,GAAD,OAAW,cAACC,EAAA,EAAD,2BAAUD,GAAV,IAAiBE,MAAI,EAACC,GAAI,OAEzD,SAASI,EAAT,GAAyD,IAAD,oBAA5BC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WACxCC,YAAS,YAET,IAAMC,EAAUC,cACVC,EAAWC,cACjB,EAIIC,YAAQ,CACVC,SAAUC,YAAYjD,KAJtBkD,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OAKTE,EAASC,iBAAO,IAChBC,EAAUC,cACVC,EACN,wGACA,EAA0BC,mBAASD,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KAmCA,OACE,gCACE,oBAAIC,UAAWnB,EAAQoB,MAAvB,sCACA,qBAAKD,UAAU,eAEf,uBAAME,SAAUb,GATH,SAACc,GAChBzB,EAAa,2BAAKyB,GAAN,IAAYX,OAAQA,EAAOY,QAASC,QAASP,QAQfQ,aAAa,MAArD,UACE,cAACnC,EAAA,EAAD,CAAMoC,WAAS,EAACC,aAAa,SAA7B,SACE,sBAAKR,UAAWnB,EAAQ4B,QAAxB,UACE,qBACEC,IAAKZ,GAAgBF,EACrBe,IAAI,GACJX,UAAS,UAAKnB,EAAQ+B,IAAb,kBAEX,sBAAKZ,UAAS,UAAKnB,EAAQgC,eAAb,gBAAd,UACE,cAAC,IAAD,CAAYb,UAAWnB,EAAQiC,aAC/B,uBACE9D,KAAK,OACLgD,UAAWnB,EAAQkC,UACnBC,SAzCc,SAACC,GAC3BA,EAAEC,iBACF,IACE,IAAMC,EAAOF,EAAEG,OAAOC,MAAM,GACvBF,GACHpC,EAASuC,YAAW,yBAA0B,UAE5CH,EAAKI,KAAL,SAAY,KAAQ,GAAI,GAC1BxC,EAASuC,YAAW,iBAAkB,UAlBf,SAACxB,GAC5B,IAAM0B,EAAS,IAAIC,WAEnB,OADAD,EAAOE,cAAc5B,GACd,IAAI6B,SAAQ,SAACC,GAClBJ,EAAOK,UAAY,WACjBD,EAAQJ,EAAOM,YAejBC,CAAqBZ,GAAMa,MAAK,SAAAC,GAC9BlC,EAASkC,MAGX,MAAOC,GACP,MAAMA,IA2BIC,OAAO,oBAKf,eAAChE,EAAA,EAAD,CAAM6B,UAAWnB,EAAQuD,KAAM7B,WAAS,EAAC8B,QAAS,EAAlD,UAEE,eAAClE,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,UACE,cAAC+D,EAAA,EAAD,CACEtC,UAAU,QACVuC,MAAM,uBACNC,MAAOC,QAAQnD,EAAOjD,MACtBqG,WAAU,aACRC,WAAW,EACXC,UAAWlG,IAAIC,SACfkG,KAAM,QACHzD,EAAS,WAIfE,EAAOjD,MACN,mBAAG2D,UAAU,aAAb,mBAA2BV,EAAOjD,YAAlC,aAA2B,EAAayG,aAK5C,eAAC3E,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,UACE,cAAC+D,EAAA,EAAD,CACEtC,UAAU,QACVuC,MAAM,kCACNC,MAAOC,QAAQnD,EAAO1C,MACtB8F,WAAU,aACRE,UAAWlG,IAAIG,cACfgG,KAAM,QACHzD,EAAS,WAGfE,EAAO1C,MACN,mBAAGoD,UAAU,aAAb,mBAA2BV,EAAO1C,YAAlC,aAA2B,EAAakG,aAK5C,cAACC,EAAA,EAAD,CACEC,aAAY,UAAE1D,EAAOxC,gBAAT,aAAE,EAAiBgG,QAC/BN,MAAOC,QAAQnD,EAAOxC,UACtBmG,cAAc,GACdP,WAAY,CACVE,UAAWlG,IAAIK,aACf8F,KAAM,YAERzD,SAAUA,EAAS,cAIrB,eAACjB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,UACE,cAAC2E,EAAA,EAAD,CACElD,UAAU,QACVuC,MAAM,wBACNY,QAASjG,IACTsF,MAAOC,QAAQnD,EAAOtC,MACtBoG,MAAO,EACPV,WAAU,aACRG,KAAM,QACHzD,EAAS,WAIfE,EAAOtC,MACN,mBAAGgD,UAAU,aAAb,mBAA2BV,EAAOtC,YAAlC,aAA2B,EAAa8F,aAK5C,eAAC3E,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,UACE,cAAC2E,EAAA,EAAD,CACElD,UAAU,QACVuC,MAAM,yCACNY,QAAS5F,IACTiF,MAAOC,QAAQnD,EAAOhC,OACtB8F,MAAO,EACPV,WAAU,aAAIG,KAAM,SAAYzD,EAAS,YAE1CE,EAAOhC,OACN,mBAAG0C,UAAU,aAAb,mBAA2BV,EAAOhC,aAAlC,aAA2B,EAAcwF,aAK7C,eAAC3E,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,UACE,cAAC2E,EAAA,EAAD,CACElD,UAAU,QACVuC,MAAM,gCACNY,QAAS1F,IACT+E,MAAOC,QAAQnD,EAAO9B,WACtB4F,MAAO,EACPV,WAAU,aACRG,KAAM,aACHzD,EAAS,gBAGfE,EAAO9B,WACN,mBAAGwC,UAAU,aAAb,mBAA2BV,EAAO9B,iBAAlC,aAA2B,EAAkBsF,aAKjD,eAAC3E,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,UACE,cAAC+D,EAAA,EAAD,CACEtC,UAAU,QACVuC,MAAM,uBACNc,WAAS,EACTC,aACE,cAACC,EAAA,EAAD,CAAoBtD,MAAM,wPAE5BuC,MAAOC,QAAQnD,EAAO5B,UACtBgF,WAAU,aACRG,KAAM,YACHzD,EAAS,eAIfE,EAAO5B,UACN,mBAAGsC,UAAU,aAAb,mBAA2BV,EAAO5B,gBAAlC,aAA2B,EAAiBoF,aAKhD,eAAC3E,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,UACE,cAAC+D,EAAA,EAAD,CACEtC,UAAU,QACVuC,MAAM,2CACNc,WAAS,EACTb,MAAOC,QAAQnD,EAAO1B,UACtB8E,WAAU,aACRG,KAAM,YACHzD,EAAS,eAGfE,EAAO1B,UACN,mBAAGoC,UAAU,aAAb,mBAA2BV,EAAO1B,gBAAlC,aAA2B,EAAiBkF,aAKhD,eAAC3E,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,UACE,cAAC+D,EAAA,EAAD,CACEtC,UAAU,QACVuC,MAAM,oCACNc,WAAS,EACTb,MAAOC,QAAQnD,EAAOxB,UACtB4E,WAAU,aACRG,KAAM,YACHzD,EAAS,eAGfE,EAAOxB,UACN,mBAAGkC,UAAU,aAAb,mBAA2BV,EAAOxB,gBAAlC,aAA2B,EAAiBgF,aAKhD,eAAC3E,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,UACE,cAAC+D,EAAA,EAAD,CACEtC,UAAU,QACVuC,MAAM,aACNc,WAAS,EACTC,aACE,cAACC,EAAA,EAAD,CAAoBtD,MAAM,wIAE5BuC,MAAOC,QAAQnD,EAAOvB,MACtB2E,WAAU,aACRG,KAAM,QACHzD,EAAS,WAGfE,EAAOvB,MACN,mBAAGiC,UAAU,aAAb,mBAA2BV,EAAOvB,YAAlC,aAA2B,EAAa+E,aAI5C,cAACU,EAAA,EAAD,CACExC,SAAU,SAACyC,GAAD,OAAgBjE,EAAOY,QAAUqD,GAC3CC,YAAY,gCACZC,cAAe1F,EACf2F,YAAapF,OAIjB,qBAAKwB,UAAU,eAEf,sBAAKA,UAAU,6CAAf,UACE,cAAC6D,EAAA,EAAD,CACE7D,UAAS,UAAKnB,EAAQiF,IAAb,YAAoBjF,EAAQkF,UACrCC,MAAM,YACNC,QAAS,cAAC,IAAD,IACTC,QAAQ,WACRC,QAAS,kBAAMzE,EAAQ0E,KAAK,gBAL9B,2BASA,cAACP,EAAA,EAAD,CACE7G,KAAK,SACLgD,UAAS,UAAKnB,EAAQiF,IAAb,sBACTO,SAAU1F,EACVsF,QACEtF,EAAa,cAAC,IAAD,CAAUqB,UAAU,aAAgB,cAAC,IAAD,IAEnDkE,QAAQ,YAPV,sCAsBVzF,EAAiB6F,aAAe,CAC9B5F,aAAc,aACdC,YAAY,GAGCF,Q,uDCvXT8F,EAAkB,WAAiC,IAAhCC,EAA+B,uDAAlB,GAAInI,EAAc,uDAAP,GAC/C,GAA0B,kBAAfmI,GAA0C,KAAfA,EACpC,MAAO,GAGT,IALsD,EAKhDC,EAAaD,EAAWE,MAAM,MALkB,cAMtCD,GANsC,IAMtD,2BAA4B,CAAC,IAApBE,EAAmB,QAC1B,IAAmE,IAA/DA,EAAIC,oBAAoBC,QAAQxI,EAAKuI,qBACvC,OAAO,GAR2C,8BAYtD,OAAOH,GAqDMK,MAlDf,WACE,MAAoCjF,oBAAS,GAA7C,mBAAOlB,EAAP,KAAmBoG,EAAnB,KACMhG,EAAWC,cAEXK,EAAY,uCAAG,WAAOc,GAAP,uCAAA6E,EAAA,kEAEjBD,GAAc,GACNrH,EAA0DyC,EAA1DzC,SAAUE,EAAgDuC,EAAhDvC,SAAUE,EAAsCqC,EAAtCrC,SAAUzB,EAA4B8D,EAA5B9D,KAAMS,EAAsBqD,EAAtBrD,SAAamI,EAHxC,YAGiD9E,EAHjD,GAOS,mBADpBsE,EAAaF,EAAgB7G,EAAUrB,KACLoI,EAPvB,uBAQf1F,EAASuC,YAAW,uEAAoC,YACxDyD,GAAc,GATC,iCAcXG,EAA0B,KAAbtH,EAAkBA,EAAS8G,MAAM,MAAQ,GAGtDS,EAA0B,KAAbrH,EAAkBA,EAAS4G,MAAM,MAAQ,GAGtDU,EApBW,2BAqBZH,GArBY,IAsBfvH,SAAU+G,EACV7G,SAAUsH,EACVpH,SAAUqH,EACV9I,OACAS,SAAUA,EAASuI,WAAW,IAAK,MA1BpB,UA4BIC,IAAQC,SAASH,GA5BrB,iBA8BfrG,EAASuC,YAAW,4BAA6B,YACjDyD,GAAc,IA/BC,kDAkCXjC,GACJ,eAAM0C,gBAAN,mBAAgBrF,YAAhB,eAAsB2C,UAAW,6BACnC/D,EAASuC,YAAWwB,EAAS,UAC7BiC,GAAc,GArCG,0DAAH,sDAyClB,OACE,cAAC,EAAD,CAAkBrG,aAAcW,EAAcV,WAAYA,K,SCjExDG,EAAW2G,aAAW,iBAAO,CACjCC,KAAM,CACJC,OAAQ,gBAkBGC,UAdf,WACE,IAAM/G,EAAUC,IAEhB,OACE,qBAAKkB,UAAU,YAAf,SACE,qBAAKA,UAAWnB,EAAQ6G,KAAxB,SACE,qBAAK1F,UAAU,WAAf,SACE,cAAC,EAAD","file":"static/js/47.474abb86.chunk.js","sourcesContent":["import { yupResolver } from \"@hookform/resolvers/yup\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport ResetIcon from \"@material-ui/icons/RotateLeft\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport wordApi from \"apis/wordApi\";\nimport InputCustom from \"components/UI/InputCustom\";\nimport SelectCustom from \"components/UI/SelectCustom\";\nimport TopicSelect from \"components/UI/TopicSelect\";\nimport {\n  MAX,\n  WORD_LEVELS,\n  WORD_SPECIALTY,\n  WORD_TYPES,\n} from \"./../../../constants\";\nimport PropTypes from \"prop-types\";\nimport React, { useRef, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { setMessage } from \"redux/actions/messageAction\";\nimport * as yup from \"yup\";\nimport InformationTooltip from \"./InformationTooltip\";\nimport PhoneticInput from \"./PhoneticInput\";\nimport useStyle from \"./style\";\nimport CameraIcon from \"@material-ui/icons/PhotoCamera\";\nimport useTitle from \"hooks/useTitle\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\n\nconst schema = yup.object().shape({\n  word: yup\n    .string()\n    .trim()\n    .required(\"Hãy nhập một từ vào đây\")\n    .lowercase()\n    .max(MAX.WORD_LEN, `Từ dài tối đã ${MAX.WORD_LEN} ký tự`),\n  mean: yup\n    .string()\n    .trim()\n    .lowercase()\n    .required(\"Hãy nhập ý nghĩa từ\")\n    .max(MAX.MEAN_WORD_LEN, `Từ dài tối đã ${MAX.MEAN_WORD_LEN} ký tự`),\n  phonetic: yup\n    .string()\n    .trim()\n    .lowercase()\n    .required(\"Hãy nhập ký âm của từ\")\n    .max(MAX.PHONETIC_LEN, `Từ dài tối đã ${MAX.PHONETIC_LEN} ký tự`),\n  type: yup\n    .string()\n    .required(\"Chọn loại của từ\")\n    .oneOf(WORD_TYPES.map((i) => i.value)),\n  level: yup\n    .string()\n    .required(\"Chọn cấp bậc của từ\")\n    .oneOf(WORD_LEVELS.map((i) => i.value)),\n  specialty: yup\n    .string()\n    .required(\"Chọn cấp bậc của từ\")\n    .oneOf(WORD_SPECIALTY.map((i) => i.value)),\n  examples: yup\n    .string()\n    .max(MAX.EXAMPLE_WORD_LEN, `Ví dụ tối đa ${MAX.EXAMPLE_WORD_LEN} ký tự`),\n  synonyms: yup\n    .string()\n    .max(\n      MAX.SYNONYMS_WORD_LEN,\n      `Từ đồng nghĩa tối đa ${MAX.SYNONYMS_WORD_LEN} ký tự`\n    ),\n  antonyms: yup\n    .string()\n    .max(\n      MAX.SYNONYMS_WORD_LEN,\n      `Từ trái nghĩa tối đa ${MAX.SYNONYMS_WORD_LEN} ký tự`\n    ),\n  note: yup\n    .string()\n    .max(MAX.NOTE_WORD_LEN, `Ghi chú tối đa ${MAX.NOTE_WORD_LEN} ký tự`),\n});\n\n// Prevent unmount component topic select\nconst ButtonWrapper = (props) => <Grid {...props} item xs={12} md={6} lg={4} />;\nconst TagsWrapper = (props) => <Grid {...props} item xs={12} />;\n\nfunction WordContribution({ onSubmitForm, submitting }) {\n  useTitle(\"Add word\");\n\n  const classes = useStyle();\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const topics = useRef([]);\n  const history = useHistory();\n  const defaultImg =\n  \"https://res.cloudinary.com/phongvn2611/image/upload/v1638368033/english/word/default-image_fbmbtn.png\";\n  const [image, setImage] = useState(defaultImg);\n\n  const convertImageToBase64 = (image) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(image);\n    return new Promise((resolve) => {\n      reader.onloadend = () => {\n        resolve(reader.result);\n      };\n    });\n  };\n\n  const handleChangePicture = (e) => {\n    e.preventDefault();\n    try {\n      const file = e.target.files[0];\n      if (!file) {\n        dispatch(setMessage(\"No files were uploaded\", \"error\"));\n      }\n      if (file.size / 1024 ** 2 > 2) {\n        dispatch(setMessage(\"Size too large\", \"error\"));\n      }\n      convertImageToBase64(file).then(res => {\n        setImage(res);\n      });\n      \n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const onSubmit = (data) => {\n    onSubmitForm({ ...data, topics: topics.current, picture: image });\n  };\n\n  return (\n    <div>\n      <h1 className={classes.title}>Thêm từ mới</h1>\n      <div className=\"dyno-break\"></div>\n\n      <form onSubmit={handleSubmit(onSubmit)} autoComplete=\"off\">\n        <Grid container alignContent=\"center\">\n          <div className={classes.avtWrap}>\n            <img\n              src={image ? image : defaultImg}\n              alt=\"\"\n              className={`${classes.avt} w-100 h-100`}\n            />\n            <div className={`${classes.cameraIconWrap} flex-center`}>\n              <CameraIcon className={classes.cameraIcon} />\n              <input\n                type=\"file\"\n                className={classes.fileInput}\n                onChange={handleChangePicture}\n                accept=\"image/*\"\n              />\n            </div>\n          </div>\n        </Grid>\n        <Grid className={classes.grid} container spacing={3}>\n          {/* new word */}\n          <Grid item xs={12} md={6} lg={4}>\n            <InputCustom\n              className=\"w-100\"\n              label=\"Từ mới (*)\"\n              error={Boolean(errors.word)}\n              inputProps={{\n                autoFocus: true,\n                maxLength: MAX.WORD_LEN,\n                name: \"word\",\n                ...register(\"word\"),\n              }}\n              // onChange={(e) => handleCheckWordExistence(e, null)}\n            />\n            {errors.word && (\n              <p className=\"text-error\">{errors.word?.message}</p>\n            )}\n          </Grid>\n\n          {/* mean */}\n          <Grid item xs={12} md={6} lg={4}>\n            <InputCustom\n              className=\"w-100\"\n              label=\"Nghĩa của từ (*)\"\n              error={Boolean(errors.mean)}\n              inputProps={{\n                maxLength: MAX.MEAN_WORD_LEN,\n                name: \"mean\",\n                ...register(\"mean\"),\n              }}\n            />\n            {errors.mean && (\n              <p className=\"text-error\">{errors.mean?.message}</p>\n            )}\n          </Grid>\n\n          {/* phonetic */}\n          <PhoneticInput\n            errorMessage={errors.phonetic?.message}\n            error={Boolean(errors.phonetic)}\n            valuePhonetic=\"\"\n            inputProps={{\n              maxLength: MAX.PHONETIC_LEN,\n              name: \"phonetic\",\n            }}\n            register={register(\"phonetic\")}\n          />\n\n          {/* word type */}\n          <Grid item xs={12} md={6} lg={4}>\n            <SelectCustom\n              className=\"w-100\"\n              label=\"Loại từ (*)\"\n              options={WORD_TYPES}\n              error={Boolean(errors.type)}\n              index={0}\n              inputProps={{\n                name: \"type\",\n                ...register(\"type\"),\n              }}\n              // onChange={(e) => handleCheckWordExistence(null, e)}\n            />\n            {errors.type && (\n              <p className=\"text-error\">{errors.type?.message}</p>\n            )}\n          </Grid>\n\n          {/* word level */}\n          <Grid item xs={12} md={6} lg={4}>\n            <SelectCustom\n              className=\"w-100\"\n              label=\"Cấp bậc của từ (*)\"\n              options={WORD_LEVELS}\n              error={Boolean(errors.level)}\n              index={0}\n              inputProps={{ name: \"level\", ...register(\"level\") }}\n            />\n            {errors.level && (\n              <p className=\"text-error\">{errors.level?.message}</p>\n            )}\n          </Grid>\n\n          {/* word specialty */}\n          <Grid item xs={12} md={6} lg={4}>\n            <SelectCustom\n              className=\"w-100\"\n              label=\"Thuộc chuyên ngành\"\n              options={WORD_SPECIALTY}\n              error={Boolean(errors.specialty)}\n              index={0}\n              inputProps={{\n                name: \"specialty\",\n                ...register(\"specialty\"),\n              }}\n            />\n            {errors.specialty && (\n              <p className=\"text-error\">{errors.specialty?.message}</p>\n            )}\n          </Grid>\n\n          {/* examples */}\n          <Grid item xs={12} md={6} lg={4}>\n            <InputCustom\n              className=\"w-100\"\n              label=\"Câu ví dụ\"\n              multiline\n              endAdornment={\n                <InformationTooltip title=\"Thêm các câu ví dụ cho từ trên. Đảm bảo có sự xuất hiện của từ đó trong câu. Bạn có thể thêm nhiều câu bằng cách xuống dòng.\" />\n              }\n              error={Boolean(errors.examples)}\n              inputProps={{\n                name: \"examples\",\n                ...register(\"examples\"),\n              }}\n            />\n\n            {errors.examples && (\n              <p className=\"text-error\">{errors.examples?.message}</p>\n            )}\n          </Grid>\n\n          {/* synonyms */}\n          <Grid item xs={12} md={6} lg={4}>\n            <InputCustom\n              className=\"w-100\"\n              label=\"Các từ đồng nghĩa\"\n              multiline\n              error={Boolean(errors.synonyms)}\n              inputProps={{\n                name: \"synonyms\",\n                ...register(\"synonyms\"),\n              }}\n            />\n            {errors.synonyms && (\n              <p className=\"text-error\">{errors.synonyms?.message}</p>\n            )}\n          </Grid>\n\n          {/* antonyms */}\n          <Grid item xs={12} md={6} lg={4}>\n            <InputCustom\n              className=\"w-100\"\n              label=\"Các từ trái nghĩa\"\n              multiline\n              error={Boolean(errors.antonyms)}\n              inputProps={{\n                name: \"antonyms\",\n                ...register(\"antonyms\"),\n              }}\n            />\n            {errors.antonyms && (\n              <p className=\"text-error\">{errors.antonyms?.message}</p>\n            )}\n          </Grid>\n\n          {/* note */}\n          <Grid item xs={12} md={6} lg={4}>\n            <InputCustom\n              className=\"w-100\"\n              label=\"Ghi chú\"\n              multiline\n              endAdornment={\n                <InformationTooltip title=\"Nhập thêm ghi chú mà bạn muốn cho từ. Thêm nhiều dòng bằng cách xuống dòng.\" />\n              }\n              error={Boolean(errors.note)}\n              inputProps={{\n                name: \"note\",\n                ...register(\"note\"),\n              }}\n            />\n            {errors.note && (\n              <p className=\"text-error\">{errors.note?.message}</p>\n            )}\n          </Grid>\n\n          <TopicSelect\n            onChange={(topicList) => (topics.current = topicList)}\n            buttonTitle=\"Thêm chủ đề\"\n            buttonWrapper={ButtonWrapper}\n            tagsWrapper={TagsWrapper}\n          />\n        </Grid>\n\n        <div className=\"dyno-break\"></div>\n        {/* button group */}\n        <div className=\"d-flex flex-end jus-content-end pt-5 w-100\">\n          <Button\n            className={`${classes.btn} ${classes.btnReset}`}\n            color=\"secondary\"\n            endIcon={<ResetIcon />}\n            variant=\"outlined\"\n            onClick={() => history.push(\"/admin/word\")}\n          >\n            Quay lại\n          </Button>\n          <Button\n            type=\"submit\"\n            className={`${classes.btn} _btn _btn-primary`}\n            disabled={submitting}\n            endIcon={\n              submitting ? <LoopIcon className=\"ani-spin\" /> : <SaveIcon />\n            }\n            variant=\"contained\"\n          >\n            Thêm từ\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nWordContribution.propTypes = {\n  onSubmitForm: PropTypes.func,\n  submitting: PropTypes.bool,\n};\n\nWordContribution.defaultProps = {\n  onSubmitForm: function () {},\n  submitting: false,\n};\n\nexport default WordContribution;\n","import wordApi from \"apis/wordApi\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// import { messageReducer } from '/src/redux/reducers/messageReducer';\nimport WordContribution from \"./index\";\nimport { setMessage } from \"redux/actions/messageAction\";\n//import messageReducer from 'redux/reducers/messageReducer';\n\nconst analysisExample = (exampleStr = \"\", word = \"\") => {\n  if (typeof exampleStr !== \"string\" || exampleStr === \"\") {\n    return [];\n  }\n\n  const exampleArr = exampleStr.split(\"\\n\");\n  for (let str of exampleArr) {\n    if (str.toLocaleLowerCase().indexOf(word.toLocaleLowerCase()) === -1) {\n      return false;\n    }\n  }\n\n  return exampleArr;\n};\n\nfunction WordContributionData() {\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (data) => {\n    try {\n      setSubmitting(true);\n      const { examples, synonyms, antonyms, word, phonetic, ...rest } = data;\n\n      // check examples validation\n      const exampleArr = analysisExample(examples, word);\n      if (typeof exampleArr === \"boolean\" && !exampleArr) {\n        dispatch(setMessage(\"Câu ví dụ phải chứa từ vựng mới.\", \"warning\"));\n        setSubmitting(false);\n        return;\n      }\n\n      // split synonyms string to an array synonyms\n      const synonymArr = synonyms !== \"\" ? synonyms.split(\"\\n\") : [];\n\n      // split antonyms string to an array synonyms\n      const antonymArr = antonyms !== \"\" ? antonyms.split(\"\\n\") : [];\n\n      // call API\n      const dataSend = {\n        ...rest,\n        examples: exampleArr,\n        synonyms: synonymArr,\n        antonyms: antonymArr,\n        word,\n        phonetic: phonetic.replaceAll(\"/\", \"\"),\n      };\n      const apiRes = await wordApi.postWord(dataSend);\n      if (apiRes) {\n        dispatch(setMessage(\"Created word successfully\", \"success\"));\n        setSubmitting(false);\n      }\n    } catch (error) {\n      const message =\n        error.response?.data?.message || \"Error, can not create word\";\n      dispatch(setMessage(message, \"error\"));\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <WordContribution onSubmitForm={handleSubmit} submitting={submitting} />\n  );\n}\n\nexport default WordContributionData;\n","import React, { useState } from \"react\";\nimport WordContributionData from \"components/WordAdmin/AddWord/data\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyle = makeStyles(() => ({\n  root: {\n    margin: \"3.2rem 0\",\n  },\n}));\n\nfunction AddWordPage() {\n  const classes = useStyle();\n\n  return (\n    <div className=\"container\">\n      <div className={classes.root}>\n        <div className=\"ani-fade\">\n          <WordContributionData />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AddWordPage;\n"],"sourceRoot":""}