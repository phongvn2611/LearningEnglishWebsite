{"version":3,"sources":["apis/listeningApi.js","redux/actions/listeningAction.js","pages/ListeningDetail.js"],"names":["URL","listeningApi","getListening","id","axios","get","getListenByTopic","topic","type","params","getListenById","getListenTopics","getAllListen","searchListen","name","postListen","formData","post","header","putListen","put","deleteListen","delete","dispatch","a","response","status","LISTEN_CONSTANT","GET_LISTENING","payload","data","SET_LISTEN_ERROR","message","DELETE_LISTEN","ListeningPage","useTitle","listenId","useParams","listen","useSelector","state","listeningReducer","history","useHistory","useDispatch","useEffect","getScript","sct","Script","split","variant","align","Name","Description","src","Video","width","height","Topic","length","map","item","color","onClick","push","_id"],"mappings":"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","file":"static/js/31.dca1e936.chunk.js","sourcesContent":["import axios from \"axios\";\nconst URL = '/api/listening';\n\nconst listeningApi = {\n  getListening: (id) => {\n    return axios.get(`${URL}/get-listening/${id}`);\n  },\n\n  getListenByTopic: (topic, type) => {\n    return axios.get(`${URL}/get-listen-by-topic`, {params: {topic, type}})\n  },\n\n  getListenById: (id) => {\n    return axios.get(`${URL}/get-listen-by-id/${id}`)\n  },\n\n  getListenTopics: (topic, type) => {\n    return axios.get(`${URL}/get-listen-topics`,{params: { topic, type}})\n  },\n\n  getAllListen: (type) => {\n    return axios.get(`${URL}/get-all-listen`, {params: {type}})\n  },\n\n  searchListen: (name) => {\n    return axios.get(`${URL}/search-listen`, {params: {name}})\n  },\n\n  postListen: (formData) => {\n    return axios.post(`${URL}/post-listen`, {...formData},\n    {\n      header: { \"content-type\": \"multipart/form-data\" },\n    })\n  },\n\n  putListen: (id, formData) => {\n    return axios.put(`${URL}/put-listen/${id}`, { ...formData},\n    {\n      params: { id },\n      header: { \"content-type\": \"multipart/form-data\" },\n    });\n  },\n\n  deleteListen: (id) => {\n    return axios.delete(`${URL}/delete-listen/${id}`)\n  },\n}\n\nexport default listeningApi;","import LISTEN_CONSTANT from \"../constants/listeningConstant\";\nimport listeningApi from \"./../../apis/listeningApi\";\nimport authReducer from \"../reducers/authReducer\";\n\n\nexport const getListening = (id) => {\n    return async (dispatch) => {\n        try {           \n          const response = await listeningApi.getListening(id);\n            if(response.status===200){\n              dispatch({\n                  type: LISTEN_CONSTANT.GET_LISTENING,\n                  payload: response.data,\n                })\n            }\n           else\n            {\n              dispatch({\n                type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n                payload: response.data.message,\n              })\n            }\n            \n        } catch (error) {\n          dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n            payload: error.message,\n         })\n          \n        }\n      }\n};\n\nexport const getListenByTopic = (topic) => {\n  return async (dispatch, getState) => {\n      try { \n        const {\n          authReducer: { user },\n        } = getState();\n\n        const response = await listeningApi.getListenByTopic(topic, user.access_token);\n        if(response.status===200){\n          dispatch({\n              type: LISTEN_CONSTANT.GET_LISTEN_BY_TOPIC,\n              payload: response.data.topics,\n            })\n        }\n        else\n        {\n          dispatch({\n            type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n            payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const getAllListen = () => {\n  return async (dispatch, getState) => {\n      try { \n        dispatch({\n          type: LISTEN_CONSTANT.SET_LISTEN_LOADING,\n          payload:true,\n        });\n\n        const {\n          authReducer: { user },\n        } = getState();\n\n        const response = await listeningApi.getAllListen(user.access_token);\n        if(response.status===200){\n          dispatch({\n              type: LISTEN_CONSTANT.GET_ALL_LISTEN,\n              payload: response.data.listens,\n            })\n        }\n        else\n        {\n          dispatch({\n            type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n            payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const getListenById = (id) => {\n  return async (dispatch, getState) => {\n      try { \n        const {\n          authReducer: { user },\n        } = getState();\n\n        const response = await listeningApi.getListenById(id, user.access_token);\n        if(response.status===200){\n          dispatch({\n              type: LISTEN_CONSTANT.GET_LISTEN_BY_ID,\n              payload: response.data.listen,\n            })\n        }\n        else\n        {\n          dispatch({\n            type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n            payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const getListenTopics = () => {\n  return async (dispatch, getState) => {\n      try { \n\n        const {\n          authReducer: { user },\n        } = getState();\n\n        const response = await listeningApi.getListenTopics(user.access_token);\n        if(response.status===200){\n          dispatch({\n              type: LISTEN_CONSTANT.GET_LISTEN_TOPICS,\n              payload: response.data.topics,\n            })\n        }\n        else\n        {\n          dispatch({\n            type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n            payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const postListen = (formData) => {\n  return async (dispatch, getState) => {\n      try { \n        const {\n          authReducer: { user },\n        } = getState();\n\n        const response = await listeningApi.postListen(formData , user.access_token);\n        if(response.status===200){\n          dispatch({\n              type: LISTEN_CONSTANT.CREATE_LISTEN,\n              payload: response.data.listen,\n            })\n           // toast.success(\"Add successfully\")\n        }\n        else\n        {\n          dispatch({\n            type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n            payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const putListen = (id, formData) => {\n  return async (dispatch, getState) => {\n      try { \n        const {\n          authReducer: { user },\n        } = getState();\n\n        const response = await listeningApi.putListen(id, formData , user.access_token);\n        if(response.status===200){\n          dispatch({\n              type: LISTEN_CONSTANT.EDIT_LISTEN,\n              payload: response.data.listen,\n            })\n          //  toast.success(\"Edit successfully\")\n        }\n        else\n        {\n          dispatch({\n            type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n            payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const deleteListen = (id) => {\n  return async (dispatch) => {\n    try {\n      const response = await listeningApi.deleteListen(id);\n      if (response.status===200) {\n        dispatch({\n          type: LISTEN_CONSTANT.DELETE_LISTEN,\n          payload: id,\n        })\n      }\n      else{\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n          payload: response.data.message,\n      })\n      }\n    } catch (error) {\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\n            payload: error.response.message,\n        })\n    }\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport useTitle from \"../hooks/useTitle\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from '@material-ui/core/Button';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {getListening}  from \"../redux/actions/listeningAction\";\nimport { useParams } from 'react-router-dom';\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core\";\n\nexport default function ListeningPage() {\n  useTitle(\"Listening\");\n\n  const listenId = useParams().id;\n  const {listen} = useSelector((state) => state.listeningReducer);\n \n  const history = useHistory();\n\n  function handleClickEdit() {\n    history.push(`/admin/listening/edit/${listen._id}`);\n  }\n\n  function handleClickGoBack() {\n    history.push(\"/admin/listening\");\n  }\n\n\n  const dispatch = useDispatch();\n  useEffect(() => \n  dispatch(getListening(listenId)), [dispatch])\n\n  const getScript = (sct) =>{\n    let Script =[];\n    if(sct){\n    Script = sct.split(\"\\n\");\n    } \n    return Script;\n  };\n\n  return (\n    <>\n      <Container>\n        <Typography variant=\"h6\" align=\"center\">\n        {listen.Name}\n        </Typography>\n\n        <Typography>\n        {listen.Description}\n        </Typography>\n       \n        <p align=\"center\"><iframe src={listen.Video} width=\"500\" height=\"300\" ></iframe></p>\n\n    <Typography variant=\"h6\">\n        Topic:    <i><mark>  {listen.Topic} </mark></i>\n    </Typography>\n    \n    <Typography variant=\"h6\">\n        Script: \n    </Typography>\n    {getScript(listen.Script).length!=0 && (getScript(listen.Script).map((item) =>\n            <Typography variant=\"body2\" align=\"justify\">\n             {item}\n            </Typography>\n      ))}\n             \n    <Button color='primary' onClick={() => handleClickGoBack()}>GO BACK</Button>\n    <Button color='primary'onClick={() => handleClickEdit()}>Edit</Button>\n         \n       \n      </Container>\n    </>\n  );\n}\n"],"sourceRoot":""}