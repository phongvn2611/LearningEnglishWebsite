{"version":3,"sources":["apis/listeningApi.js","redux/actions/listeningAction.js","pages/ListeningDetail.js"],"names":["URL","listeningApi","getListening","id","axios","get","getListenByTopic","topic","type","params","getListenById","getListenTopics","getAllListen","searchListen","name","postListen","formData","post","header","putListen","put","deleteListen","patch","dispatch","a","response","status","LISTEN_CONSTANT","GET_LISTENING","payload","data","SET_LISTEN_ERROR","message","DELETE_LISTEN","ListeningPage","useTitle","listenId","useParams","listen","useSelector","state","listeningReducer","history","useHistory","useDispatch","useEffect","variant","align","Name","Description","src","Video","width","height","Topic","dangerouslySetInnerHTML","__html","Script","color","onClick","push","_id"],"mappings":"mIACMA,EAAG,iBAEHC,EAAe,CACnBC,aAAc,SAACC,GACb,OAAOC,IAAMC,IAAN,UAAaL,EAAb,0BAAkCG,KAG3CG,iBAAkB,SAACC,EAAOC,GACxB,OAAOJ,IAAMC,IAAN,UAAaL,EAAb,wBAAwC,CAACS,OAAQ,CAACF,QAAOC,WAGlEE,cAAe,SAACP,GACd,OAAOC,IAAMC,IAAN,UAAaL,EAAb,6BAAqCG,KAG9CQ,gBAAiB,SAACJ,EAAOC,GACvB,OAAOJ,IAAMC,IAAN,UAAaL,EAAb,sBAAqC,CAACS,OAAQ,CAAEF,QAAOC,WAGhEI,aAAc,SAACJ,GACb,OAAOJ,IAAMC,IAAN,UAAaL,EAAb,mBAAmC,CAACS,OAAQ,CAACD,WAGtDK,aAAc,SAACC,GACb,OAAOV,IAAMC,IAAN,UAAaL,EAAb,kBAAkC,CAACS,OAAQ,CAACK,WAGrDC,WAAY,SAACC,GACX,OAAOZ,IAAMa,KAAN,UAAcjB,EAAd,+BAAqCgB,GAC5C,CACEE,OAAQ,CAAE,eAAgB,0BAI9BC,UAAW,SAAChB,EAAIa,GACd,OAAOZ,IAAMgB,IAAN,UAAapB,EAAb,uBAA+BG,GAA/B,eAA0Ca,GACjD,CACEP,OAAQ,CAAEN,MACVe,OAAQ,CAAE,eAAgB,0BAI9BG,aAAc,SAAClB,GACb,OAAOC,IAAMkB,MAAN,UAAetB,EAAf,0BAAoCG,MAIhCF,O,mJC3CFC,G,OAAe,SAACC,GACzB,8CAAO,WAAOoB,GAAP,eAAAC,EAAA,+EAEsBvB,IAAaC,aAAaC,GAFhD,OAGsB,OADjBsB,EAFL,QAGaC,OACVH,EAAS,CACLf,KAAMmB,IAAgBC,cACtBC,QAASJ,EAASK,OAKtBP,EAAS,CACPf,KAAMmB,IAAgBI,iBACtBF,QAASJ,EAASK,KAAKE,UAb5B,gDAkBDT,EAAS,CAAEf,KAAMmB,IAAgBI,iBAC/BF,QAAS,KAAMG,UAnBhB,yDAAP,wDAgNSX,EAAe,SAAClB,GAC3B,8CAAO,WAAOoB,GAAP,eAAAC,EAAA,+EAEoBvB,IAAaoB,aAAalB,GAF9C,OAGmB,OADhBsB,EAFH,QAGUC,OACXH,EAAS,CACPf,KAAMmB,IAAgBM,cACtBJ,QAAS1B,IAIXoB,EAAS,CAAEf,KAAMmB,IAAgBI,iBAC/BF,QAASJ,EAASK,KAAKE,UAXxB,gDAeDT,EAAS,CAAEf,KAAMmB,IAAgBI,iBAC7BF,QAAS,KAAMJ,SAASO,UAhB3B,yDAAP,wD,iCCvNF,6HAWe,SAASE,IACtBC,YAAS,aAET,IAAMC,EAAWC,cAAYlC,GACtBmC,EAAUC,aAAY,SAACC,GAAD,OAAWA,EAAMC,oBAAvCH,OAEDI,EAAUC,cAWhB,IAAMpB,EAAWqB,cAIjB,OAHAC,qBAAU,kBACVtB,EAASrB,YAAakC,MAAY,CAACb,IAGjC,mCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAYuB,QAAQ,KAAKC,MAAM,SAA/B,SACCT,EAAOU,OAGR,cAAC,IAAD,UACCV,EAAOW,cAGR,mBAAGF,MAAM,SAAT,SAAkB,wBAAQG,IAAKZ,EAAOa,MAAOC,MAAM,MAAMC,OAAO,UAEpE,eAAC,IAAD,CAAYP,QAAQ,KAApB,uBACc,4BAAG,sCAASR,EAAOgB,MAAhB,YAGjB,cAAC,IAAD,CAAYR,QAAQ,KAApB,qBAGA,oBAAIS,wBAAyB,CAACC,OAAQlB,EAAOmB,UAE7C,cAAC,IAAD,CAAQC,MAAM,UAAUC,QAAS,WA9BjCjB,EAAQkB,KAAK,qBA8Bb,qBACA,cAAC,IAAD,CAAQF,MAAM,UAASC,QAAS,WAnChCjB,EAAQkB,KAAR,gCAAsCtB,EAAOuB,OAmC7C","file":"static/js/39.957310d2.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst URL = `/api/listening`;\r\n\r\nconst listeningApi = {\r\n  getListening: (id) => {\r\n    return axios.get(`${URL}/get-listening/${id}`);\r\n  },\r\n\r\n  getListenByTopic: (topic, type) => {\r\n    return axios.get(`${URL}/get-listen-by-topic`, {params: {topic, type}})\r\n  },\r\n\r\n  getListenById: (id) => {\r\n    return axios.get(`${URL}/get-listen-by-id/${id}`)\r\n  },\r\n\r\n  getListenTopics: (topic, type) => {\r\n    return axios.get(`${URL}/get-listen-topics`,{params: { topic, type}})\r\n  },\r\n\r\n  getAllListen: (type) => {\r\n    return axios.get(`${URL}/get-all-listen`, {params: {type}})\r\n  },\r\n\r\n  searchListen: (name) => {\r\n    return axios.get(`${URL}/search-listen`, {params: {name}})\r\n  },\r\n\r\n  postListen: (formData) => {\r\n    return axios.post(`${URL}/post-listen`, {...formData},\r\n    {\r\n      header: { \"content-type\": \"multipart/form-data\" },\r\n    })\r\n  },\r\n\r\n  putListen: (id, formData) => {\r\n    return axios.put(`${URL}/put-listen/${id}`, { ...formData},\r\n    {\r\n      params: { id },\r\n      header: { \"content-type\": \"multipart/form-data\" },\r\n    });\r\n  },\r\n\r\n  deleteListen: (id) => {\r\n    return axios.patch(`${URL}/delete-listen/${id}`)\r\n  },\r\n}\r\n\r\nexport default listeningApi;\r\n","import LISTEN_CONSTANT from \"../constants/listeningConstant\";\r\nimport listeningApi from \"./../../apis/listeningApi\";\r\nimport authReducer from \"../reducers/authReducer\";\r\n\r\n\r\nexport const getListening = (id) => {\r\n    return async (dispatch) => {\r\n        try {           \r\n          const response = await listeningApi.getListening(id);\r\n            if(response.status===200){\r\n              dispatch({\r\n                  type: LISTEN_CONSTANT.GET_LISTENING,\r\n                  payload: response.data,\r\n                })\r\n            }\r\n           else\r\n            {\r\n              dispatch({\r\n                type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n                payload: response.data.message,\r\n              })\r\n            }\r\n            \r\n        } catch (error) {\r\n          dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n            payload: error.message,\r\n         })\r\n          \r\n        }\r\n      }\r\n};\r\n\r\nexport const getListenByTopic = (topic) => {\r\n  return async (dispatch, getState) => {\r\n      try { \r\n        const {\r\n          authReducer: { user },\r\n        } = getState();\r\n\r\n        const response = await listeningApi.getListenByTopic(topic, user.access_token);\r\n        if(response.status===200){\r\n          dispatch({\r\n              type: LISTEN_CONSTANT.GET_LISTEN_BY_TOPIC,\r\n              payload: response.data.topics,\r\n            })\r\n        }\r\n        else\r\n        {\r\n          dispatch({\r\n            type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n            payload: response.data.message,\r\n          })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n            payload: error.response.message,\r\n        })\r\n      }\r\n    }\r\n};\r\n\r\nexport const getAllListen = () => {\r\n  return async (dispatch, getState) => {\r\n      try { \r\n        dispatch({\r\n          type: LISTEN_CONSTANT.SET_LISTEN_LOADING,\r\n          payload:true,\r\n        });\r\n\r\n        const {\r\n          authReducer: { user },\r\n        } = getState();\r\n\r\n        const response = await listeningApi.getAllListen(user.access_token);\r\n        if(response.status===200){\r\n          dispatch({\r\n              type: LISTEN_CONSTANT.GET_ALL_LISTEN,\r\n              payload: response.data.listens,\r\n            })\r\n        }\r\n        else\r\n        {\r\n          dispatch({\r\n            type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n            payload: response.data.message,\r\n          })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n            payload: error.response.message,\r\n        })\r\n      }\r\n    }\r\n};\r\n\r\nexport const getListenById = (id) => {\r\n  return async (dispatch, getState) => {\r\n      try { \r\n        const {\r\n          authReducer: { user },\r\n        } = getState();\r\n\r\n        const response = await listeningApi.getListenById(id, user.access_token);\r\n        if(response.status===200){\r\n          dispatch({\r\n              type: LISTEN_CONSTANT.GET_LISTEN_BY_ID,\r\n              payload: response.data.listen,\r\n            })\r\n        }\r\n        else\r\n        {\r\n          dispatch({\r\n            type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n            payload: response.data.message,\r\n          })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n            payload: error.response.message,\r\n        })\r\n      }\r\n    }\r\n};\r\n\r\nexport const getListenTopics = () => {\r\n  return async (dispatch, getState) => {\r\n      try { \r\n\r\n        const {\r\n          authReducer: { user },\r\n        } = getState();\r\n\r\n        const response = await listeningApi.getListenTopics(user.access_token);\r\n        if(response.status===200){\r\n          dispatch({\r\n              type: LISTEN_CONSTANT.GET_LISTEN_TOPICS,\r\n              payload: response.data.topics,\r\n            })\r\n        }\r\n        else\r\n        {\r\n          dispatch({\r\n            type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n            payload: response.data.message,\r\n          })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n            payload: error.response.message,\r\n        })\r\n      }\r\n    }\r\n};\r\n\r\nexport const postListen = (formData) => {\r\n  return async (dispatch, getState) => {\r\n      try { \r\n        const {\r\n          authReducer: { user },\r\n        } = getState();\r\n\r\n        const response = await listeningApi.postListen(formData , user.access_token);\r\n        if(response.status===200){\r\n          dispatch({\r\n              type: LISTEN_CONSTANT.CREATE_LISTEN,\r\n              payload: response.data.listen,\r\n            })\r\n           // toast.success(\"Add successfully\")\r\n        }\r\n        else\r\n        {\r\n          dispatch({\r\n            type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n            payload: response.data.message,\r\n          })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n            payload: error.response.message,\r\n        })\r\n      }\r\n    }\r\n};\r\n\r\nexport const putListen = (id, formData) => {\r\n  return async (dispatch, getState) => {\r\n      try { \r\n        const {\r\n          authReducer: { user },\r\n        } = getState();\r\n\r\n        const response = await listeningApi.putListen(id, formData , user.access_token);\r\n        if(response.status===200){\r\n          dispatch({\r\n              type: LISTEN_CONSTANT.EDIT_LISTEN,\r\n              payload: response.data.listen,\r\n            })\r\n          //  toast.success(\"Edit successfully\")\r\n        }\r\n        else\r\n        {\r\n          dispatch({\r\n            type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n            payload: response.data.message,\r\n          })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n            payload: error.response.message,\r\n        })\r\n      }\r\n    }\r\n};\r\n\r\nexport const deleteListen = (id) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await listeningApi.deleteListen(id);\r\n      if (response.status===200) {\r\n        dispatch({\r\n          type: LISTEN_CONSTANT.DELETE_LISTEN,\r\n          payload: id,\r\n        })\r\n      }\r\n      else{\r\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n          payload: response.data.message,\r\n      })\r\n      }\r\n    } catch (error) {\r\n        dispatch({ type: LISTEN_CONSTANT.SET_LISTEN_ERROR,\r\n            payload: error.response.message,\r\n        })\r\n    }\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport useTitle from \"../hooks/useTitle\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {getListening}  from \"../redux/actions/listeningAction\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nexport default function ListeningPage() {\r\n  useTitle(\"Listening\");\r\n\r\n  const listenId = useParams().id;\r\n  const {listen} = useSelector((state) => state.listeningReducer);\r\n \r\n  const history = useHistory();\r\n\r\n  function handleClickEdit() {\r\n    history.push(`/admin/listening/edit/${listen._id}`);\r\n  }\r\n\r\n  function handleClickGoBack() {\r\n    history.push(\"/admin/listening\");\r\n  }\r\n\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => \r\n  dispatch(getListening(listenId)), [dispatch])\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Typography variant=\"h6\" align=\"center\">\r\n        {listen.Name}\r\n        </Typography>\r\n\r\n        <Typography>\r\n        {listen.Description}\r\n        </Typography>\r\n       \r\n        <p align=\"center\"><iframe src={listen.Video} width=\"500\" height=\"300\" ></iframe></p>\r\n\r\n    <Typography variant=\"h6\">\r\n        Topic:    <i><mark>  {listen.Topic} </mark></i>\r\n    </Typography>\r\n    \r\n    <Typography variant=\"h6\">\r\n        Script: \r\n    </Typography>\r\n    <td dangerouslySetInnerHTML={{__html: listen.Script}} />\r\n             \r\n    <Button color='primary' onClick={() => handleClickGoBack()}>GO BACK</Button>\r\n    <Button color='primary'onClick={() => handleClickEdit()}>Edit</Button>\r\n         \r\n       \r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}